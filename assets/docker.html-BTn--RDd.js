import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,d as e,b as s,at as u,t as m,w as t,r as l,o as g,e as i}from"./app-DM0WOK1z.js";const b="/images/gitlab/docker/pending-approval-1.png",v="/images/gitlab/docker/pending-approval-2.png",h="/images/gitlab/docker/pending-approval-3.png",k={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"};function w(r,a){const n=l("router-link"),o=l("ShieldsGroup"),p=l("TagLinks");return g(),d("div",null,[e("h1",f,[e("a",y,[e("span",null,m(r.$frontmatter.title)+" 관련",1)])]),e("nav",A,[e("ul",null,[e("li",null,[s(n,{to:"#prerequisite-s"},{default:t(()=>a[0]||(a[0]=[i("Prerequisite(s)")])),_:1})]),e("li",null,[s(n,{to:"#docker-run"},{default:t(()=>a[1]||(a[1]=[i("Docker Run")])),_:1}),e("ul",null,[e("li",null,[s(n,{to:"#prerequisite-s-1"},{default:t(()=>a[2]||(a[2]=[i("Prerequisite(s)")])),_:1})]),e("li",null,[s(n,{to:"#run"},{default:t(()=>a[3]||(a[3]=[i("Run")])),_:1})]),e("li",null,[s(n,{to:"#check-log-s"},{default:t(()=>a[4]||(a[4]=[i("Check Log(s)")])),_:1})]),e("li",null,[s(n,{to:"#gitlab-admin-계정"},{default:t(()=>a[5]||(a[5]=[i("Gitlab Admin 계정")])),_:1})]),e("li",null,[s(n,{to:"#타-사용자-approve"},{default:t(()=>a[6]||(a[6]=[i("타 사용자 Approve")])),_:1})])])]),e("li",null,[s(n,{to:"#access"},{default:t(()=>a[7]||(a[7]=[i("Access")])),_:1})])])]),a[8]||(a[8]=e("hr",null,null,-1)),a[9]||(a[9]=e("h2",{id:"prerequisite-s",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#prerequisite-s"},[e("span",null,"Prerequisite(s)")])],-1)),s(o,{logos:"docker,gitlab"}),a[10]||(a[10]=u(`<hr><h2 id="docker-run" tabindex="-1"><a class="header-anchor" href="#docker-run"><span>Docker Run</span></a></h2><h3 id="prerequisite-s-1" tabindex="-1"><a class="header-anchor" href="#prerequisite-s-1"><span>Prerequisite(s)</span></a></h3><div class="hint-container warning"><p class="hint-container-title">For Windows</p><ul><li>Add environment variable <code>GITLAB_HOME</code> = “C:\\GitLab”</li><li>Add inbound Windows firewall rule “Port” &gt; TCP – 8080 &gt; Name = TCP – 8080 – GITLAB</li><li>Add inbound Windows firewall rule “Port” &gt; TCP – 4430 &gt; Name = TCP – 4430 – GITLAB</li><li>Add outbound Windows firewall rule “Port” &gt; TCP – 8080 &gt; Name = TCP – 8080 – GITLAB</li><li>Add outbound Windows firewall rule “Port” &gt; TCP – 4430 &gt; Name = TCP – 4430 – GITLAB</li></ul></div><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>Run</span></a></h3><blockquote><p>(For Linux)</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--hostname</span> gitlab.example.com <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--publish</span> <span class="token number">1980</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">1922</span>:22 <span class="token parameter variable">--publish</span> <span class="token number">19443</span>:443 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/config:/etc/gitlab <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/logs:/var/log/gitlab <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--volume</span> <span class="token variable">$GITLAB_HOME</span>/data:/var/opt/gitlab <span class="token punctuation">\\</span></span>
<span class="line">  gitlab/gitlab-ce:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>(For Windows)</p></blockquote><div class="language-batch line-numbers-mode" data-highlighter="prismjs" data-ext="batch"><pre><code class="language-batch"><span class="line"><span class="token command"><span class="token keyword">docker</span> run <span class="token parameter attr-name">-d</span> -it <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--hostname</span> gitlab.example.com <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--publish</span> <span class="token number">1980</span>:<span class="token number">80</span> <span class="token parameter attr-name">--publish</span> <span class="token number">1922</span>:<span class="token number">22</span> <span class="token parameter attr-name">--publish</span> <span class="token number">19443</span>:<span class="token number">443</span> <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--name</span> gitlab <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--restart</span> always <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--volume</span> <span class="token variable">%GITLAB_HOME%</span><span class="token parameter attr-name">/config<span class="token punctuation">:</span></span>/etc<span class="token parameter attr-name">/gitlab</span> <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--volume</span> <span class="token variable">%GITLAB_HOME%</span><span class="token parameter attr-name">/logs<span class="token punctuation">:</span></span>/var/log<span class="token parameter attr-name">/gitlab</span> <span class="token operator">^</span></span>
<span class="line">  <span class="token parameter attr-name">--volume</span> <span class="token variable">%GITLAB_HOME%</span><span class="token parameter attr-name">/data<span class="token punctuation">:</span></span>/var/opt<span class="token parameter attr-name">/gitlab</span> <span class="token operator">^</span></span>
<span class="line">  gitlab/gitlab-ce:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Option(s)</p><ul><li><code>detach</code>: 백그라운드 실행.</li><li><code>hostname</code>: gitlab 전용 도메인</li><li><code>publish</code>: gitlab에서는 22(ssh), 80(http), 443(https) 포트를 사용하는데 이를 포트포워딩 해준다.</li><li><code>name</code>: 컨테이너의 이름을 지정한다.</li><li><code>restart</code>: docker desktop이 실행될 때마다 자동으로 실행하는 명령어.</li><li><code>volume</code>: 데이터가 저장되는 곳을 설정해준다. 저 코드대로 라면 당연히 로컬에 <code>$GITLAB_HOME/gitlab</code> 디렉토리가 있어야 한다. <code>/config</code>, <code>/logs</code>, <code>/data</code> 디렉토리는 없다면 자동으로 생성해준다.</li></ul></div><h3 id="check-log-s" tabindex="-1"><a class="header-anchor" href="#check-log-s"><span>Check Log(s)</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> gitlab</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>좀 기다리다가(최대 10분) health check 같은 특정 로그들이 계속 반복해서 출력되고 있다면 정상적으로 컨테이너가 생성된 것이다.</p><h3 id="gitlab-admin-계정" tabindex="-1"><a class="header-anchor" href="#gitlab-admin-계정"><span>Gitlab Admin 계정</span></a></h3><figure><img src="`+b+`" alt="처음에 접근 시 이와 같은 현상이 나타남" tabindex="0"><figcaption>처음에 접근 시 이와 같은 현상이 나타남</figcaption></figure><p>컨테이너로 sh접근</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab /bin/bash <span class="token parameter variable">-c</span> <span class="token string">&quot;cat /etc/gitlab/initial_root_password&quot;</span> <span class="token comment"># 출력된 로그에서 Password 부분을 다른 데 기록해두자. </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>아래와 비슷한 로그가 생성</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line"># WARNING: This value is valid only in the following conditions</span>
<span class="line">#          1. If provided manually (either via \`GITLAB_ROOT_PASSWORD\` environment variable or via \`gitlab_rails[&#39;initial_root_password&#39;]\` setting in \`gitlab.rb\`, it was provided before database was seeded for the first time (usually, the first reconfigure run).</span>
<span class="line">#          2. Password hasn&#39;t been changed manually, either via UI or via command line.</span>
<span class="line">#</span>
<span class="line">#          If the password shown here doesn&#39;t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.</span>
<span class="line"></span>
<span class="line">Password: +Q1PpDEfw2NvY5u+HAsMgzbWg6WZozON4tAnOldG1/c=</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이러면 로그인 시 🔑<code>root</code> / <code>+Q1PpDEfw2NvY5u+HAsMgzbWg6WZozON4tAnOldG1/c=</code> 로 로그인 시도</p><h3 id="타-사용자-approve" tabindex="-1"><a class="header-anchor" href="#타-사용자-approve"><span>타 사용자 Approve</span></a></h3><figure><img src="`+v+'" alt="Pending Approval 1/2" tabindex="0"><figcaption>Pending Approval 1/2</figcaption></figure><figure><img src="'+h+`" alt="Pending Approval 2/2" tabindex="0"><figcaption>Pending Approval 2/2</figcaption></figure><hr><h2 id="access" tabindex="-1"><a class="header-anchor" href="#access"><span>Access</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">http://localhost:1980</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr>`,27)),s(p)])}const P=c(k,[["render",w]]),T=JSON.parse('{"path":"/devops/gitlab/docker.html","title":"Docker","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Docker","description":"GitLab > Docker","icon":"fa-brands fa-docker","category":["GitLab","Docker"],"tag":["sh","bash","cli","docker","docker-desktop","yml","yaml","docker-container","vm","docker-compose"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"https://chanhi2000.github.io/images/gitlab/docker/pending-approval-1.png\\",\\"https://chanhi2000.github.io/images/gitlab/docker/pending-approval-2.png\\",\\"https://chanhi2000.github.io/images/gitlab/docker/pending-approval-3.png\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/devops/gitlab/docker.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"GitLab > Docker"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chanhi2000.github.io/images/gitlab/docker/pending-approval-1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"docker-compose"}],["meta",{"property":"article:tag","content":"vm"}],["meta",{"property":"article:tag","content":"docker-container"}],["meta",{"property":"article:tag","content":"yaml"}],["meta",{"property":"article:tag","content":"yml"}],["meta",{"property":"article:tag","content":"docker-desktop"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"bash"}],["meta",{"property":"article:tag","content":"sh"}]]},"git":{},"readingTime":{"minutes":1.12,"words":335},"filePathRelative":"devops/gitlab/docker.md"}');export{P as comp,T as data};
