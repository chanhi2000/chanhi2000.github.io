import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as a,at as d,b as n,t as u,w as l,r as i,o as m,e as t}from"./app-DM0WOK1z.js";const v={},k={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},h={class:"table-of-contents"};function g(p,s){const e=i("router-link"),c=i("TagLinks");return m(),r("div",null,[a("h1",k,[a("a",b,[a("span",null,u(p.$frontmatter.title)+" 관련",1)])]),a("nav",h,[a("ul",null,[a("li",null,[n(e,{to:"#if-statement"},{default:l(()=>s[0]||(s[0]=[t("if statement")])),_:1})]),a("li",null,[n(e,{to:"#for문"},{default:l(()=>s[1]||(s[1]=[t("for문")])),_:1})]),a("li",null,[n(e,{to:"#while문"},{default:l(()=>s[2]||(s[2]=[t("while문")])),_:1})]),a("li",null,[n(e,{to:"#case-명령"},{default:l(()=>s[3]||(s[3]=[t("case 명령")])),_:1})]),a("li",null,[n(e,{to:"#스크립트-종료하기"},{default:l(()=>s[4]||(s[4]=[t("스크립트 종료하기")])),_:1})]),a("li",null,[n(e,{to:"#multiline-입력"},{default:l(()=>s[5]||(s[5]=[t("Multiline 입력")])),_:1})]),a("li",null,[n(e,{to:"#aliases"},{default:l(()=>s[6]||(s[6]=[t("aliases")])),_:1}),a("ul",null,[a("li",null,[n(e,{to:"#basics"},{default:l(()=>s[7]||(s[7]=[t("Basics")])),_:1})]),a("li",null,[n(e,{to:"#with-argument-s"},{default:l(()=>s[8]||(s[8]=[t("with Argument(s)")])),_:1})])])]),a("li",null,[n(e,{to:"#쉘-스크립트-작성후-실행하기-전에-문법을-확인하는-n-옵션"},{default:l(()=>s[9]||(s[9]=[t("쉘 스크립트 작성후 실행하기 전에 문법을 확인하는 -n 옵션")])),_:1})]),a("li",null,[n(e,{to:"#ps"},{default:l(()=>s[10]||(s[10]=[t("ps")])),_:1})]),a("li",null,[n(e,{to:"#make-tasks-running-in-background"},{default:l(()=>s[11]||(s[11]=[t("Make tasks running in background")])),_:1})]),a("li",null,[n(e,{to:"#quickly-jump-to-frequently-used-directories"},{default:l(()=>s[12]||(s[12]=[t("Quickly jump to frequently-used directories")])),_:1})]),a("li",null,[n(e,{to:"#perform-calculations"},{default:l(()=>s[13]||(s[13]=[t("Perform calculations")])),_:1})])])]),s[14]||(s[14]=d(`<hr><h2 id="if-statement" tabindex="-1"><a class="header-anchor" href="#if-statement"><span>if statement</span></a></h2><p>가장 기본적인 if-else 구문의 형식</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">if</span> <span class="token builtin class-name">command</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">   <span class="token comment"># &lt;commands&gt;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bash 쉘은 <code>if</code>문 줄에 정의된 명령을 실행한다. 이 명령의 종료 상태가 <code>0</code>(명령이 성공적으로 완료됨) 이라면 <code>then</code> 아래에 있는 명령이 실행된다. 명령의 종료 상태가 <code>0</code>이 아니라면 <code>then</code> 아래에 있는 명령은 실행되지 않고, bash 쉘은 스크립트의 다른 명령으로 넘어간다.</p><details class="hint-container details"><summary>if-then-else</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">if</span> <span class="token builtin class-name">command</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token comment"># &lt;commands&gt;</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    <span class="token comment"># &lt;commands&gt;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if</code>문 줄의 명령이 0이 아닌 종료 상태 코드를 돌려주면 bash 쉘은 <code>else</code> 부분의 명령을 실행한다.</p><details class="hint-container details"><summary>중첩된 if문</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">if</span> command1<span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token comment"># &lt;commands&gt;</span></span>
<span class="line"><span class="token keyword">elif</span> command2<span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token comment"># &lt;more commands&gt;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>elif는 if-then 구문의 <code>else</code> 부분을 이어 나간다. <code>elif</code> 명령의 종료 상태 코드가 <code>0</code>이라면 bash는 두 번째 <code>then</code>문 부부너의 명령들(more commands)을 실행한다.</p><details class="hint-container details"><summary>테스트 명령 써보기</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">if</span> <span class="token builtin class-name">test</span> condition<span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    명령</span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>테스트 명령에 나와있는 조건이 참으로 평가되면 테스트 명령은 종료 상태 코드를 0으로 돌려준다.</p><p>bash 쉘은 if-then 구문에서 테스트 명령을 쓰지 않고도 조건을 테스트하는 다른 방법을 제공한다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> condition <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    명령</span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>대괄호는 테스트 조건을 정의한다. 한 가지 주의할 점이 있다. 여는 대괄호 뒤와 닫는 대괄호 앞에 각각 빈 칸이 있어야 한다. 안그러면 오류 메세지가 나타난다. 테스트 명령 및 테스트 조건은 세 가지 종류의 조건을 평가할 수 있다(파일 비교, 숫자 비교, 문자열 비교).</p></details></details></details><details class="hint-container details"><summary>파일 비교</summary><p>쉘 스크립트에서 가장 강력하고 가장 많이 사용되는 비교다. 리눅스 파일 시스템에서 파일과 디렉토리의 상태를 테스트할 수 있다.</p><table><thead><tr><th style="text-align:left;">비교</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>-d file</code></td><td style="text-align:left;">파일이 존재하고 디렉토리인지 검사한다</td></tr><tr><td style="text-align:left;"><code>-e file</code></td><td style="text-align:left;">파일이 존재하는지 검사한다</td></tr><tr><td style="text-align:left;"><code>-f file</code></td><td style="text-align:left;">파일이 존재하고 파일인지 검사한다</td></tr><tr><td style="text-align:left;"><code>-L file</code></td><td style="text-align:left;">파일이 심볼릭 링크이면 참</td></tr><tr><td style="text-align:left;"><code>-r file</code></td><td style="text-align:left;">파일이 존재하고 읽을 수 있는지 검사한다</td></tr><tr><td style="text-align:left;"><code>-s file</code></td><td style="text-align:left;">파일이 존재하고 비어 있지 않은지 검사한다</td></tr><tr><td style="text-align:left;"><code>-w file</code></td><td style="text-align:left;">파일이 존재하고 기록할 수 있는지 검사한다</td></tr><tr><td style="text-align:left;"><code>-x file</code></td><td style="text-align:left;">파일이 존재하고 실행할 수 있는지 검사한다</td></tr><tr><td style="text-align:left;"><code>-O file</code></td><td style="text-align:left;">파일이 존재하고 현재 사용자가 소유한 것인지 검사한다</td></tr><tr><td style="text-align:left;"><code>-G file</code></td><td style="text-align:left;">파일이 존재하고 기본 그룹이 현재 사용자와 같은지 검사한다</td></tr><tr><td style="text-align:left;"><code>file1 -nt file2</code></td><td style="text-align:left;">file1이 file2보다 새것인지 검사한다</td></tr><tr><td style="text-align:left;"><code>file1 -ot file2</code></td><td style="text-align:left;">file1이 file2보다 오래된 것인지 검사한다</td></tr></tbody></table><h3 id="디렉토리-확인하기" tabindex="-1"><a class="header-anchor" href="#디렉토리-확인하기"><span>디렉토리 확인하기</span></a></h3><p>지정된 디렉토리가 시스템에 존재하는지 보려면 <code>-d</code> 검사를 한다. 보통은 디렉토리에 파일을 쓰거나 디렉토리의 위치를 변경하기 전에 사용하면 좋다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">jump_directory</span><span class="token operator">=</span>/home/arthur</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token variable">$jump_directory</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="개체가-존재하는지-여부-검사하기" tabindex="-1"><a class="header-anchor" href="#개체가-존재하는지-여부-검사하기"><span>개체가 존재하는지 여부 검사하기</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">location</span><span class="token operator">=</span><span class="token environment constant">$HOME</span></span>
<span class="line"><span class="token assign-left variable">file_name</span><span class="token operator">=</span><span class="token string">&quot;bong&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token variable">$location</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> <span class="token comment"># Directory does exist</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token variable">$location</span>/<span class="token variable">$file_name</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;file does exist&quot;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;file doesn&#39;t exist&quot;</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Directory doesn&#39;t exist&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>스크립트에서 파일 또는 디렉토리를 사용하기 전에 이 개채가 있는지 확인하려면 -e 비교를 사용한다(-e 비교는 파일과 디렉토리 양쪽 모두에 적용된다).</p></details><details class="hint-container details"><summary>숫자 비교</summary><table><thead><tr><th style="text-align:left;">비교</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>n1 -eq n2</code></td><td style="text-align:left;"><code>n1</code>과 <code>n2</code>가 같은지 검사한다</td></tr><tr><td style="text-align:left;"><code>n1 -ge n2</code></td><td style="text-align:left;"><code>n1</code>이 <code>n2</code>보다 크거나 같은지 검사한다</td></tr><tr><td style="text-align:left;"><code>n1 -gt n2</code></td><td style="text-align:left;"><code>n1</code>이 <code>n2</code>보다 큰지 검사한다</td></tr><tr><td style="text-align:left;"><code>n1 -le n2</code></td><td style="text-align:left;"><code>n1</code>이 <code>n2</code>보다 작거나 같은지 검사한다</td></tr><tr><td style="text-align:left;"><code>n1 -lt n2</code></td><td style="text-align:left;"><code>n1</code>이 <code>n2</code>보다 작은지 검사한다</td></tr><tr><td style="text-align:left;"><code>n1 -ne n2</code></td><td style="text-align:left;"><code>n1</code>과 <code>n2</code>가 같지 않은지 검사한다</td></tr></tbody></table><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$val1</span> <span class="token parameter variable">-gt</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">   <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>문자열 비교</summary><table><thead><tr><th style="text-align:left;">비교</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>str1 = str2</code></td><td style="text-align:left;"><code>str1</code>이 <code>str2</code>와 같은지 검사한다</td></tr><tr><td style="text-align:left;"><code>str1 != str2</code></td><td style="text-align:left;"><code>str1</code>이 <code>str2</code>와 같지 않은지 검사한다</td></tr><tr><td style="text-align:left;"><code>str1 &lt; str2</code></td><td style="text-align:left;"><code>str1</code>이 <code>str2</code>보다 작은지 검사한다</td></tr><tr><td style="text-align:left;"><code>str1 &gt; str2</code></td><td style="text-align:left;"><code>str1</code>이 <code>str2</code>보다 큰지 검사한다</td></tr><tr><td style="text-align:left;"><code>-n str1</code></td><td style="text-align:left;"><code>str1</code>의 길이가 0보다 큰지(0이 아닌지) 검사한다</td></tr><tr><td style="text-align:left;"><code>-z str1</code></td><td style="text-align:left;"><code>str1</code>의 길이가 0인지 검사한다</td></tr></tbody></table><p>문자열이 같은가 같지 않은가 비교할 때는 모든 문장부호와 대문자도 고려된다는 점을 잊지 말자.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">testuser</span><span class="token operator">=</span>bong</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token environment constant">$USER</span> <span class="token operator">=</span> <span class="token variable">$testuser</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>어떤 문자열이 다른 문자열보다 큰가 작은가를 판단할 때부터 일이 복잡해진다. 문자열이 큰지의 여부를 테스트하는 기능을 사용하려고 할 때 두가지 문제가 있다.</p><p>첫째, 부등호 기호를 이스케이프 해야 하는 것. 그렇지 않으면 쉘은 이를 리다이렉트 기호로 해석해서 문자열 값을 파일 이름으로 사용한다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">val1</span><span class="token operator">=</span>baseball</span>
<span class="line"><span class="token assign-left variable">val2</span><span class="token operator">=</span>hockey</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$val1</span> <span class="token punctuation">\\</span><span class="token operator">&gt;</span> <span class="token variable">$val2</span> <span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>둘째, 어느 것이 더 큰지 순서를 결정하는 논리는 sort 명령에서 쓰이는 것과 같지 않다.</p><p>비교 테스트에서는 표준 ASCII 순서를 사용하며, 정렬 순서를 결정하기 위하여 각 문자의 ASCII 숫자 코드값을 이용한다. sort 명령은 시스템 로케일의 언어 설정에 정의된 정렬 순서를 사용한다. 영어라면 로케일 설정은 소문자를 대문자보다 앞서서 정렬하도록 지정한다.</p><p>비어있고 초기화되지 않은 변수는 쉘 스크립트 테스트에 치명적인 영향을 미칠 수 있다. 변수의 내용이 확실하지 않으면 숫자 또는 문자열 비교를 사용하기 전에 -n 또는 -z를 사용하여 값을 포함하는지 테스트하는 것이 가장 좋다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">val1</span><span class="token operator">=</span>testing</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token variable">$val1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$val2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;hi&quot;</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="for문" tabindex="-1"><a class="header-anchor" href="#for문"><span>for문</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">FILE</span><span class="token operator">=</span><span class="token string">&quot;/Users/bong&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">state</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> $FILE<span class="token variable">)</span></span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token variable">$state</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> ~/bong*.sh<span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-r</span> <span class="token string">&quot;<span class="token variable">$i</span>&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">.</span> <span class="token variable">$i</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for문 돌리면서 스크립트 파일 실행</p><details class="hint-container details"><summary>C 스타일 for문</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">TEST_TRIES</span><span class="token operator">=</span><span class="token number">7</span></span>
<span class="line"><span class="token assign-left variable">TEST_INTERVAL_SECONDS</span><span class="token operator">=</span><span class="token number">5</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> TRY_COUNT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> TRY_COUNT <span class="token operator">&lt;=</span> $TEST_TRIES<span class="token punctuation">;</span> TRY_COUNT <span class="token operator">++</span> <span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">sleep</span> <span class="token variable">$TEST_INTERVAL_SECONDS</span></span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Checking HTTP port. (&quot;</span><span class="token variable">$TRY_COUNT</span><span class="token string">&quot;/<span class="token variable">$TEST_TRIES</span>)&quot;</span></span>
<span class="line"></span>
<span class="line">    <span class="token assign-left variable">HTTP_STATUS_CODE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">curl</span> <span class="token parameter variable">-sL</span> <span class="token parameter variable">-o</span> /dev/null <span class="token parameter variable">-I</span> <span class="token parameter variable">-w</span> <span class="token string">&quot;%{http_code}&quot;</span> $TEST_URL --max-time <span class="token number">10</span><span class="token variable">\`</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$HTTP_STATUS_CODE</span> <span class="token parameter variable">-gt</span> <span class="token number">199</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$HTTP_STATUS_CODE</span> <span class="token parameter variable">-lt</span> <span class="token number">300</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;The Spring Boot process has started successfully.&quot;</span></span>
<span class="line">        <span class="token builtin class-name">break</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$TRY_COUNT</span> <span class="token operator">=</span> <span class="token variable">$TEST_TRIES</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;ERROR : The Spring Boot process failed to start.&quot;</span></span>
<span class="line">        <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="while문" tabindex="-1"><a class="header-anchor" href="#while문"><span>while문</span></a></h2><details class="hint-container details"><summary>기본 while 형식</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$var1</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token variable">$var1</span></span>
<span class="line">  <span class="token assign-left variable">var1</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable">$var1</span> - <span class="token number">1</span> <span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="hint-container details"><summary><code>getopts</code> 명령어 사용</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token comment"># -a 옵션이 있는지 플래그 변수 a_flag와</span></span>
<span class="line"><span class="token comment"># -p 옵션의 구분자를 정의하기</span></span>
<span class="line"><span class="token assign-left variable">a_flag</span><span class="token operator">=</span><span class="token number">0</span></span>
<span class="line"><span class="token assign-left variable">separator</span><span class="token operator">=</span><span class="token string">&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">&quot;ap:&quot;</span> option</span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token variable">$option</span> <span class="token keyword">in</span></span>
<span class="line">    a<span class="token punctuation">)</span></span>
<span class="line">      <span class="token assign-left variable">a_flag</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">      <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">    p<span class="token punctuation">)</span></span>
<span class="line">      <span class="token assign-left variable">separator</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$OPTARG</span>&quot;</span></span>
<span class="line">      <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">\\</span>?<span class="token punctuation">)</span></span>
<span class="line">      <span class="token builtin class-name">echo</span> <span class="token string">&quot;Usage: getopts.sh [-a] [-p separator] target_dir&quot;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token file-descriptor important">&amp;2</span></span>
<span class="line">      <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">      <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">esac</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="case-명령" tabindex="-1"><a class="header-anchor" href="#case-명령"><span>case 명령</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token keyword">case</span> variable <span class="token keyword">in</span></span>
<span class="line">  pattern1 <span class="token operator">|</span> pattern2<span class="token punctuation">)</span> </span>
<span class="line">    commands1</span>
<span class="line">    <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">  pattern3<span class="token punctuation">)</span> </span>
<span class="line">    commands2</span>
<span class="line">    <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">  *<span class="token punctuation">)</span> </span>
<span class="line">    default commands</span>
<span class="line">    <span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">esac</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>예제</summary><h3 id="bong-sh" tabindex="-1"><a class="header-anchor" href="#bong-sh"><span><code>bong.sh</code></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function-name function">echo_host</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">hostname</span><span class="token variable">\`</span></span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token string">&quot;[<span class="token variable">$host</span>] <span class="token variable">$1</span>&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#### Main #####</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">OPTION</span><span class="token operator">=</span><span class="token variable">$1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">case</span> <span class="token variable">$OPTION</span> <span class="token keyword">in</span></span>
<span class="line">  <span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span> start_nginx<span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span> stop_nginx<span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token string">&quot;restart&quot;</span><span class="token punctuation">)</span> restart_nginx<span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">  *<span class="token punctuation">)</span> echo_host <span class="token string">&quot;option : <span class="token variable">$0</span> start|stop|restart&quot;</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">esac</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bong-sh-실행결과" tabindex="-1"><a class="header-anchor" href="#bong-sh-실행결과"><span><code>bong.sh</code> 실행결과</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">./bong.sh ttt</span>
<span class="line"><span class="token comment"># [MyMacBook] option : ./bong.sh start|stop|restart</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="스크립트-종료하기" tabindex="-1"><a class="header-anchor" href="#스크립트-종료하기"><span>스크립트 종료하기</span></a></h2><div class="hint-container info"><p class="hint-container-title">리눅스 종료 상태코드</p><table><thead><tr><th style="text-align:left;">코드</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>0</code></td><td style="text-align:left;">명령이 성공적으로 완료됨</td></tr><tr><td style="text-align:left;"><code>1</code></td><td style="text-align:left;">일반 알 수 없는 오류</td></tr><tr><td style="text-align:left;"><code>2</code></td><td style="text-align:left;">쉘 명령을 잘못 사용함</td></tr><tr><td style="text-align:left;"><code>126</code></td><td style="text-align:left;">명령을 실행할 수 없음(Permission denied)</td></tr><tr><td style="text-align:left;"><code>127</code></td><td style="text-align:left;">명령을 찾을 수 없음</td></tr><tr><td style="text-align:left;"><code>128</code></td><td style="text-align:left;">잘못된 종료 매개변수</td></tr><tr><td style="text-align:left;"><code>128+x</code></td><td style="text-align:left;">치명적인 오류로 리눅스 신호 x를 포함</td></tr><tr><td style="text-align:left;"><code>130</code></td><td style="text-align:left;"><kbd>Ctrl</kbd>+<kbd>C</kbd>로 명령이 종료됨</td></tr><tr><td style="text-align:left;"><code>255</code></td><td style="text-align:left;">범위를 벗어난 종료 상태</td></tr></tbody></table></div><details class="hint-container details"><summary>종료 코드 확인하는 명령어</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>cf) 종료 상태 코드는 0 ~ 255까지 쓸 수 있다.</p></blockquote></details><details class="hint-container details"><summary>exit 명령</summary><p>쉘 스크립트는 마지막 명령의 종료 상태로 끝마친다. 사용자 정의 종료 상태 코드를 돌려주도록 이를 변경할 수 있다. exit 명령은 스크립트가 종료될 때 종료 상태를 지정할 수 있다.</p><h3 id="test13" tabindex="-1"><a class="header-anchor" href="#test13"><span><code>test13</code></span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token assign-left variable">var1</span><span class="token operator">=</span><span class="token number">10</span></span>
<span class="line"><span class="token assign-left variable">var2</span><span class="token operator">=</span><span class="token number">30</span></span>
<span class="line"><span class="token assign-left variable">var3</span><span class="token operator">=</span>$<span class="token punctuation">[</span><span class="token variable">$var1</span> + <span class="token variable">$var2</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token builtin class-name">echo</span> The answer is <span class="token variable">$var3</span></span>
<span class="line">exit5</span>
<span class="line"><span class="token comment">#exit $var3 처럼 exit 명령의 매개변수에 변수를 사용할 수도 있다.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="결과" tabindex="-1"><a class="header-anchor" href="#결과"><span>결과</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">chmod</span> u+x test13</span>
<span class="line">./test13</span>
<span class="line"><span class="token comment"># The answer is 40</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$?</span></span>
<span class="line"><span class="token comment"># 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="multiline-입력" tabindex="-1"><a class="header-anchor" href="#multiline-입력"><span>Multiline 입력</span></a></h2><p><code>\\</code> 을 붙여 커맨드 입력</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line">wsdl2java.sh <span class="token parameter variable">-u</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-ss</span> <span class="token parameter variable">-sd</span> <span class="token parameter variable">-g</span> <span class="token parameter variable">-b</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-o</span> ./BmsSifDctToProcessMobService <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">-uri</span> http://onnara.saas.gcloud.go.kr/bms/service/BmsSifDctToProcessMobService?wsdl</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="aliases" tabindex="-1"><a class="header-anchor" href="#aliases"><span>aliases</span></a></h2><h3 id="basics" tabindex="-1"><a class="header-anchor" href="#basics"><span>Basics</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">ls</span><span class="token operator">=</span><span class="token string">&#39;ls -l&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="with-argument-s" tabindex="-1"><a class="header-anchor" href="#with-argument-s"><span>with Argument(s)</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">wrap_args</span><span class="token operator">=</span><span class="token string">&#39;f(){ echo before &quot;$@&quot; after;  unset -f f; }; f&#39;</span></span>
<span class="line">wrap_args x y z</span>
<span class="line"><span class="token comment"># before x y z after</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>You can replace <code>$@</code> with $<code>1</code> if you only want the first argument.</p></blockquote><div class="hint-container info"><p class="hint-container-title">Explanation</p><p>This creates a temporary function <code>f</code>, which is passed the arguments.</p><p>Alias arguments are only passed at the end. Note that <code>f</code> is called at the very end of the alias.</p><p>The <code>unset -f</code> removes the function definition as the alias is executed so it doesn&#39;t hang around afterwards.</p></div><hr><h2 id="쉘-스크립트-작성후-실행하기-전에-문법을-확인하는-n-옵션" tabindex="-1"><a class="header-anchor" href="#쉘-스크립트-작성후-실행하기-전에-문법을-확인하는-n-옵션"><span>쉘 스크립트 작성후 실행하기 전에 문법을 확인하는 <code>-n</code> 옵션</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">sh</span> <span class="token parameter variable">-n</span> script.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="ps" tabindex="-1"><a class="header-anchor" href="#ps"><span><code>ps</code></span></a></h2><details class="hint-container details"><summary><code>java</code> 프로세스 PID 리스트업 해서 출력</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary><code>grep</code> 하면 방금 실행한 것도 잡히기 때문에 그거 제외해주는 명령어</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>pid가 여러개일 때 check하는 if문 추가적으로</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>응용: <code>check_running()</code></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function-name function">check_running</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> nginx <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span><span class="token variable">\`</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token variable">$PID</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token builtin class-name">echo</span> <span class="token string">&quot;nginx process already started (PID:<span class="token variable">$PID</span>)&quot;</span></span>
<span class="line">        <span class="token builtin class-name">exit</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">fi</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="make-tasks-running-in-background" tabindex="-1"><a class="header-anchor" href="#make-tasks-running-in-background"><span>Make tasks running in background</span></a></h2><p>커멘드 뒤에 <code>&amp;</code> 추가</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/messages <span class="token operator">&amp;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>결과창에 <code>[1] 614</code>이 나온다면</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token function">fg</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>를 입력하여 다시 foreground로 복귀</p><hr><h2 id="quickly-jump-to-frequently-used-directories" tabindex="-1"><a class="header-anchor" href="#quickly-jump-to-frequently-used-directories"><span>Quickly jump to frequently-used directories</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token assign-left variable">CDPATH</span><span class="token operator">=</span><span class="token string">&#39;.:~:/usr/local/apache/htdocs:/disk1/backups&#39;</span></span>
<span class="line"><span class="token builtin class-name">export</span> CDPATH</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cd</code> 입력 후 자주 찾는 디렉토리를 알려준다.</p><hr><h2 id="perform-calculations" tabindex="-1"><a class="header-anchor" href="#perform-calculations"><span>Perform calculations</span></a></h2><p>숫자계산</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code class="language-bash"><span class="line"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">16</span><span class="token operator">/</span><span class="token number">2</span><span class="token variable">))</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,62)),n(c)])}const x=o(v,[["render",g]]),w=JSON.parse('{"path":"/programming/sh/basics.html","title":"Basics","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Basics","description":"Shell > Basics","icon":"fas fa-egg","category":["Shell","Basics"],"tag":["bash","linux","macos","terminal","alias","tail","multiline"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Basics\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/sh/basics.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Basics"}],["meta",{"property":"og:description","content":"Shell > Basics"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"multiline"}],["meta",{"property":"article:tag","content":"tail"}],["meta",{"property":"article:tag","content":"alias"}],["meta",{"property":"article:tag","content":"terminal"}],["meta",{"property":"article:tag","content":"macos"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"bash"}]]},"git":{},"readingTime":{"minutes":2.67,"words":802},"filePathRelative":"programming/sh/basics.md"}');export{x as comp,w as data};
