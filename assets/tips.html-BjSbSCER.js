import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as n,at as d,b as a,t as k,w as l,e,r as t,o as g}from"./app-DM0WOK1z.js";const v={},m={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},h={id:"kotlin",tabindex:"-1"},f={class:"header-anchor",href:"#kotlin"};function w(i,s){const p=t("VPIcon"),o=t("router-link"),c=t("TagLinks");return g(),u("div",null,[n("h1",m,[n("a",b,[n("span",null,k(i.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[a(o,{to:"#kotlin"},{default:l(()=>[a(p,{icon:"iconfont icon-kotlin"}),s[0]||(s[0]=e("Kotlin"))]),_:1}),n("ul",null,[n("li",null,[a(o,{to:"#slf4j-loggers-in-3-ways"},{default:l(()=>s[1]||(s[1]=[e("Slf4j loggers in 3 ways")])),_:1})])])])])]),s[3]||(s[3]=n("hr",null,null,-1)),n("h2",h,[n("a",f,[n("span",null,[a(p,{icon:"iconfont icon-kotlin"}),s[2]||(s[2]=e("Kotlin"))])])]),s[4]||(s[4]=d(`<h3 id="slf4j-loggers-in-3-ways" tabindex="-1"><a class="header-anchor" href="#slf4j-loggers-in-3-ways"><span>Slf4j loggers in 3 ways</span></a></h3><p>If you use <a href="https://slf4j.org" target="_blank" rel="noopener noreferrer">SLF4J</a> (and possibly Logback) for logging, you are probably familiar with the following code:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MyClass<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We like short code, and we like DRY. So here are 3 other ways of getting a logger, to avoid repeating the tedious <code>LoggerFactory</code> stuff:</p><h4 id="_1-factory-function" tabindex="-1"><a class="header-anchor" href="#_1-factory-function"><span>1. Factory function</span></a></h4><ul><li>Function definition is easy to understand, but usage requires the class name.</li><li>Gives the correct logger class name in companions.</li></ul><details class="hint-container details"><summary>Usages</summary><p>@tab:active Code</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Logger <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Usage 1</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithFactoryFunction <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> logger <span class="token operator">=</span> logger<span class="token operator">&lt;</span>LogWithFactoryFunction<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a factory function!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Usage 2</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithCompanionFactoryFunction <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> logger <span class="token operator">=</span> logger<span class="token operator">&lt;</span>LogWithFactoryFunction<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a factory function!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Usage 3</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithFactoryFunction <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> logger <span class="token operator">=</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a factory function!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively, you can help kotlin figure out <code>T</code> to avoid passing it in. However, this would cause <code>Companion</code> to show up again:</p><p>@tab Usage 4</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithFactoryFunction <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> logger <span class="token operator">=</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a factory function!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or even shorter, creating it as an extension function</p></details><h4 id="_2-companion-with-inheritance" tabindex="-1"><a class="header-anchor" href="#_2-companion-with-inheritance"><span>2. Companion with inheritance</span></a></h4><ul><li>No visible <code>logger</code> property in your code; it&#39;s available through the companion object</li><li>Logger gets <code>$Companion</code> in the logger name</li><li>Interface version asks for a logger each time, causing slf4j to check its initialization state</li></ul><details class="hint-container details"><summary>Usages</summary><p>@tab:active Code</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">abstract</span> <span class="token keyword">class</span> Log <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> logger<span class="token operator">:</span> Logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>javaClass<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token keyword">interface</span> Log <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>javaClass<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Usage 1</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithCompanion <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a companion!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Usage 2</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithInterfaceCompanion <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token operator">:</span> Log <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a companion!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="_3-delegate-property" tabindex="-1"><a class="header-anchor" href="#_3-delegate-property"><span>3. Delegate property</span></a></h4><ul><li>Harder to understand delegate source code</li><li>Logger gets <code>$Companion</code> in the logger name if placed in a companion</li></ul><details class="hint-container details"><summary>Usage</summary><p>@tab:active Code</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger</span>
<span class="line"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory</span>
<span class="line"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ReadOnlyProperty</span>
<span class="line"><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>KProperty</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> LoggerDelegate <span class="token operator">:</span> ReadOnlyProperty<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token punctuation">,</span> Logger<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token function">createLogger</span><span class="token punctuation">(</span>clazz<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> Logger <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> logger<span class="token operator">:</span> Logger<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Logger <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            logger <span class="token operator">=</span> <span class="token function">createLogger</span><span class="token punctuation">(</span>thisRef<span class="token operator">!!</span><span class="token punctuation">.</span>javaClass<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> logger<span class="token operator">!!</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@tab Usage 1</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> LogWithDelegate <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> logger <span class="token keyword">by</span> <span class="token function">LoggerDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hey from a delegate!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h4 id="😎4-bonus" tabindex="-1"><a class="header-anchor" href="#😎4-bonus"><span>😎4. Bonus</span></a></h4><p>If you have access to the <code>KClass</code>, this is an easy way to get rid of <code>$Companion</code>:</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Logger <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>isCompanion<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span>enclosingClass<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,17)),a(c)])}const _=r(v,[["render",w]]),x=JSON.parse('{"path":"/programming/java/tips.html","title":"Tips","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Tips","description":"Java > Tips","icon":"fas fa-lightbulb","category":["Java","Kotlin","Tips"],"tag":["kt","kts","kotlin","companion-object","logger","slf4j","log4j","lombok"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tips\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/java/tips.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Tips"}],["meta",{"property":"og:description","content":"Java > Tips"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"lombok"}],["meta",{"property":"article:tag","content":"log4j"}],["meta",{"property":"article:tag","content":"slf4j"}],["meta",{"property":"article:tag","content":"logger"}],["meta",{"property":"article:tag","content":"companion-object"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"kts"}],["meta",{"property":"article:tag","content":"kt"}]]},"git":{},"readingTime":{"minutes":1.53,"words":460},"filePathRelative":"programming/java/tips.md"}');export{_ as comp,x as data};
