import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,d as n,b as e,at as r,t as b,w as t,e as s,r as i,o as g}from"./app-DM0WOK1z.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},h={class:"table-of-contents"},j={id:"kotlin",tabindex:"-1"},S={class:"header-anchor",href:"#kotlin"},B={id:"java-관련",tabindex:"-1"},x={class:"header-anchor",href:"#java-관련"};function T(k,a){const c=i("router-link"),o=i("VPIcon"),u=i("Tabs"),d=i("TagLinks");return g(),v("div",null,[n("h1",w,[n("a",y,[n("span",null,b(k.$frontmatter.title)+" 관련",1)])]),n("nav",h,[n("ul",null,[n("li",null,[e(c,{to:"#공통"},{default:t(()=>a[0]||(a[0]=[s("공통")])),_:1}),n("ul",null,[n("li",null,[e(c,{to:"#자주쓰는-singleton-pattern"},{default:t(()=>a[1]||(a[1]=[s("자주쓰는 Singleton Pattern")])),_:1})]),n("li",null,[e(c,{to:"#자주쓰는-enum-pattern"},{default:t(()=>a[2]||(a[2]=[s("자주쓰는 Enum Pattern")])),_:1})]),n("li",null,[e(c,{to:"#자주쓰는-documentation"},{default:t(()=>a[3]||(a[3]=[s("자주쓰는 Documentation")])),_:1})])])]),n("li",null,[e(c,{to:"#kotlin"},{default:t(()=>[e(o,{icon:"iconfont icon-kotlin"}),a[4]||(a[4]=s("Kotlin"))]),_:1}),n("ul",null,[n("li",null,[e(c,{to:"#자주쓰는-builder-pattern"},{default:t(()=>a[5]||(a[5]=[s("자주쓰는 Builder Pattern")])),_:1})]),n("li",null,[e(c,{to:"#in-out-and-where"},{default:t(()=>a[6]||(a[6]=[s("in, out, and where")])),_:1})])])]),n("li",null,[e(c,{to:"#java-관련"},{default:t(()=>[e(o,{icon:"fa-brands fa-java"}),a[7]||(a[7]=s("Java 관련"))]),_:1}),n("ul",null,[n("li",null,[e(c,{to:"#properties-파일객체-구성"},{default:t(()=>a[8]||(a[8]=[s("Properties 파일객체 구성")])),_:1})])])])])]),a[26]||(a[26]=n("hr",null,null,-1)),a[27]||(a[27]=n("h2",{id:"공통",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#공통"},[n("span",null,"공통")])],-1)),a[28]||(a[28]=n("h3",{id:"자주쓰는-singleton-pattern",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#자주쓰는-singleton-pattern"},[n("span",null,"자주쓰는 Singleton Pattern")])],-1)),e(u,{data:[{id:'<VPIcon icon="fa-brands fa-java"/>Java'},{id:'<VPIcon icon="iconfont icon-kotlin"/>Kotlin'}],active:0},{title0:t(({value:p,isActive:l})=>[e(o,{icon:"fa-brands fa-java"}),a[9]||(a[9]=s("Java"))]),title1:t(({value:p,isActive:l})=>[e(o,{icon:"iconfont icon-kotlin"}),a[10]||(a[10]=s("Kotlin"))]),tab0:t(({value:p,isActive:l})=>a[11]||(a[11]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",{class:"language-java"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"FooBar"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"FooBar"),s(),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"FooBar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token class-name"},"FooBar"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token constant"},"INSTANCE"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"FooBar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token constant"},"INSTANCE"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// ...[생략]...")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:p,isActive:l})=>a[12]||(a[12]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(" FooBar "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"companion"),s(),n("span",{class:"token keyword"},"object"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token annotation builtin"},"@Volatile"),s(),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"var"),s(" INSTANCE"),n("span",{class:"token operator"},":"),s(" FooBar"),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token annotation builtin"},"@JvmStatic"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" FooBar "),n("span",{class:"token operator"},"="),s(" INSTANCE "),n("span",{class:"token operator"},"?:"),s(),n("span",{class:"token function"},"synchronized"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            INSTANCE "),n("span",{class:"token operator"},"?:"),s(),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"also"),s(),n("span",{class:"token punctuation"},"{"),s(" INSTANCE "),n("span",{class:"token operator"},"="),s(" it "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"build"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"FooBar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[29]||(a[29]=n("hr",null,null,-1)),a[30]||(a[30]=n("h3",{id:"자주쓰는-enum-pattern",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#자주쓰는-enum-pattern"},[n("span",null,"자주쓰는 Enum Pattern")])],-1)),e(u,{data:[{id:'<VPIcon icon="fa-brands fa-java"/>Java'},{id:'<VPIcon icon="iconfont icon-kotlin"/>Kotlin'}],active:0},{title0:t(({value:p,isActive:l})=>[e(o,{icon:"fa-brands fa-java"}),a[13]||(a[13]=s("Java"))]),title1:t(({value:p,isActive:l})=>[e(o,{icon:"iconfont icon-kotlin"}),a[14]||(a[14]=s("Kotlin"))]),tab0:t(({value:p,isActive:l})=>a[15]||(a[15]=[n("blockquote",null,[n("p",null,"Lombok을 사용하여 코드를 간결하게 작성")],-1),n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",{class:"language-java"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("example"),n("span",{class:"token punctuation"},"."),s("markiiimark")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("lombok"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"AllArgsConstructor")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("lombok"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Getter")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Map")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("java"),n("span",{class:"token punctuation"},"."),s("util"),n("span",{class:"token punctuation"},"."),s("concurrent"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"ConcurrentHashMap")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Getter")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@AllArgsConstructor")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token class-name"},"FooBar"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"A"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"a"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"1"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"B"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"b"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"2"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"C"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"c"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"3"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" code"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" a"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"int"),s(" b"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"FooBar"),n("span",{class:"token punctuation"},">")]),s(" findMap ")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ConcurrentHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Foobar"),s(" item"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"values"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("            findMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),s("item"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getCode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(" item"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token class-name"},"Foobar"),s(),n("span",{class:"token function"},"findByCode"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" i"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token keyword"},"return"),s(" findMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("i"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// ...[생략]... 이 부분 부터는 알아서 응용 코드 적용")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:p,isActive:l})=>a[16]||(a[16]=[n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"enum"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token function"},"FooBar"),n("span",{class:"token punctuation"},"(")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"val"),s(" code"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"val"),s(" a"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"val"),s(" b"),n("span",{class:"token operator"},":"),s(" Int")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"A"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"a"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"0"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"B"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"b"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"1"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"C"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"c"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'"2"')]),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"companion"),s(),n("span",{class:"token keyword"},"object"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"val"),s(" findMap"),n("span",{class:"token operator"},":"),s(" MutableMap"),n("span",{class:"token operator"},"<"),s("Int"),n("span",{class:"token punctuation"},","),s(" FooBar"),n("span",{class:"token operator"},">"),s()]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token operator"},"="),s(" ConcurrentHashMap"),n("span",{class:"token operator"},"<"),s("Int"),n("span",{class:"token punctuation"},","),s(" FooBar"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"init"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token function"},"values"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"forEach"),s(),n("span",{class:"token punctuation"},"{"),s(" findMap"),n("span",{class:"token punctuation"},"["),s("it"),n("span",{class:"token punctuation"},"."),s("code"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" it "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token annotation builtin"},"@JvmStatic"),s(),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"findByCode"),n("span",{class:"token punctuation"},"("),s("code"),n("span",{class:"token operator"},":"),s(" Int"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" FooBar"),n("span",{class:"token operator"},"?"),s()]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token operator"},"="),s(" findMap"),n("span",{class:"token punctuation"},"["),s("code"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[31]||(a[31]=n("h3",{id:"자주쓰는-documentation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#자주쓰는-documentation"},[n("span",null,"자주쓰는 Documentation")])],-1)),e(u,{data:[{id:'<VPIcon icon="fa-brands fa-java"/>Java'},{id:'<VPIcon icon="iconfont icon-kotlin"/>Kotlin'}],active:0},{title0:t(({value:p,isActive:l})=>[e(o,{icon:"fa-brands fa-java"}),a[17]||(a[17]=s("Java"))]),title1:t(({value:p,isActive:l})=>[e(o,{icon:"iconfont icon-kotlin"}),a[18]||(a[18]=s("Kotlin"))]),tab0:t(({value:p,isActive:l})=>a[19]||(a[19]=[n("blockquote",null,[n("p",null,"for Javadoc")],-1),n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",{class:"language-java"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("example"),n("span",{class:"token punctuation"},"."),s("markiiimark")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token doc-comment comment"},"/**"),s(`
`),n("span",{class:"line"}," * FooGaze"),s(`
`),n("span",{class:"line"}," * "),s(`
`),n("span",{class:"line"}," * 클래스는 무엇 무엇을 합니다."),s(`
`),n("span",{class:"line"},[s(" * "),n("span",{class:"token keyword"},"@since"),s(" 2022.12.12")]),s(`
`),n("span",{class:"line"},[s(" * "),n("span",{class:"token keyword"},"@author"),s(" chlee")]),s(`
`),n("span",{class:"line"},[s(" * "),n("span",{class:"token keyword"},"@see"),s(),n("span",{class:"token reference"},[n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("example"),n("span",{class:"token punctuation"},"."),s("marikiimark"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"FooBar")])]),s(`
`),n("span",{class:"line"}," */")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"FooGaze"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token doc-comment comment"},"/** "),s(`
`),n("span",{class:"line"},"     * doStuff"),s(`
`),n("span",{class:"line"},"     * 뭘 할 것인가"),s(`
`),n("span",{class:"line"},"     * "),s(`
`),n("span",{class:"line"},[s("     * "),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"input"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"@link"),s(),n("span",{class:"token reference"},[n("span",{class:"token class-name"},"String")]),n("span",{class:"token punctuation"},"}"),s(" 입력값")]),s(`
`),n("span",{class:"line"},[s("     * "),n("span",{class:"token keyword"},"@returns"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"@link"),s(),n("span",{class:"token reference"},[n("span",{class:"token class-name"},"String")]),n("span",{class:"token punctuation"},"}"),s(" 출력값")]),s(`
`),n("span",{class:"line"},"     */")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token function"},"doStuff"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" input"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"//...[생략]...")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" input "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'" a"'),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:p,isActive:l})=>a[20]||(a[20]=[n("blockquote",null,[n("p",null,"for KDoc")],-1),n("div",{class:"language-kotlin line-numbers-mode","data-highlighter":"prismjs","data-ext":"kt"},[n("pre",null,[n("code",{class:"language-kotlin"},[n("span",{class:"line"},[n("span",{class:"token keyword"},"package"),s(" com"),n("span",{class:"token punctuation"},"."),s("example"),n("span",{class:"token punctuation"},"."),s("markiiimark")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/**"),s(`
`),n("span",{class:"line"}," * [FooGaze]"),s(`
`),n("span",{class:"line"}," * 클래스는 무엇 무엇을 합니다."),s(`
`),n("span",{class:"line"}," *"),s(`
`),n("span",{class:"line"}," * @since 2022.12.12"),s(`
`),n("span",{class:"line"}," * @author chlee"),s(`
`),n("span",{class:"line"}," * @see com.example.markiiimark.FooBar"),s(`
`),n("span",{class:"line"}," */")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(" FooGaze "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"/**"),s(`
`),n("span",{class:"line"},"     * [FooGaze.doStuff]"),s(`
`),n("span",{class:"line"},"     * 뭘 할 것인가"),s(`
`),n("span",{class:"line"},"     * "),s(`
`),n("span",{class:"line"},"     * @param input [String] 입력값"),s(`
`),n("span",{class:"line"},"     * @returns [String] 출력값"),s(`
`),n("span",{class:"line"},"     */")]),s(`
`),n("span",{class:"line"},[s("     "),n("span",{class:"token keyword"},"fun"),s(),n("span",{class:"token function"},"doStuff"),n("span",{class:"token punctuation"},"("),s("input"),n("span",{class:"token operator"},":"),s(" String"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(" String "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// ... [생략] ...")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(" input "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string-literal singleline"},[n("span",{class:"token string"},'" a"')])]),s(`
`),n("span",{class:"line"},[s("     "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[32]||(a[32]=n("hr",null,null,-1)),n("h2",j,[n("a",S,[n("span",null,[e(o,{icon:"iconfont icon-kotlin"}),a[21]||(a[21]=s("Kotlin"))])])]),a[33]||(a[33]=r(`<h3 id="자주쓰는-builder-pattern" tabindex="-1"><a class="header-anchor" href="#자주쓰는-builder-pattern"><span>자주쓰는 Builder Pattern</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">FooBar</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">val</span> a<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> b<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">    <span class="token keyword">val</span> c<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> d<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">val</span> e<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">class</span> Builder <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">var</span> bA<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span> <span class="token keyword">fun</span> <span class="token function">a</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> bA <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">var</span> bB<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span> <span class="token keyword">fun</span> <span class="token function">b</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> bB <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">var</span> bC<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span> <span class="token keyword">fun</span> <span class="token function">c</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> bC <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">var</span> bD<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span> <span class="token keyword">fun</span> <span class="token function">d</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> bD <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">var</span> bE<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span><span class="token punctuation">;</span> <span class="token keyword">fun</span> <span class="token function">e</span><span class="token punctuation">(</span>block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span> bE <span class="token operator">=</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">fun</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> FooBar <span class="token operator">=</span> <span class="token function">FooBar</span><span class="token punctuation">(</span>bA<span class="token punctuation">,</span> bB<span class="token punctuation">,</span> bC<span class="token punctuation">,</span> bD<span class="token punctuation">,</span> bE<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">builder</span><span class="token punctuation">(</span>block<span class="token operator">:</span> Builder<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> FooBar <span class="token operator">=</span> <span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in-out-and-where" tabindex="-1"><a class="header-anchor" href="#in-out-and-where"><span><code>in</code>, <code>out</code>, and <code>where</code></span></a></h3><details class="hint-container details"><summary><code>in</code>, <code>out</code>, and <code>where</code></summary><p>They are variance modifiers and they help us allowing subtyping when using generics</p><p>Suppose we have a class called <code>Case</code> that will indicate if we either consume a weapon or produce it</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Case<span class="token operator">&lt;</span>T<span class="token operator">:</span> Weapon<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> contents <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">consume</span><span class="token punctuation">(</span>item<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You might think that this is indeed possible thanks to polymorphism</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> sniperRifle<span class="token operator">:</span> Case<span class="token operator">&lt;</span>SniperRifle<span class="token operator">&gt;</span> <span class="token operator">=</span> Case<span class="token operator">&lt;</span>SniperRifle<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> rifle <span class="token operator">=</span> Case<span class="token operator">&lt;</span>Rifle<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">rifle <span class="token operator">=</span> sniperRifle <span class="token comment">// NOPE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Normally assigning a child instance to a parent instance is possible. But this time it isn&#39;t because <strong>generics doesn&#39;t allow subtyping by default</strong> and by that I mean we have to yous keywords like <code>out</code> and <code>in</code> to be able to use subtyping.</p><p>If we declare <code>T</code> with an <code>out</code> modifier, it will be convariant, so now we preserve subtyping but we cannot consume (take <code>T</code> as parameters) <code>T</code>, we can just produce (return) it.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Case<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">:</span> Weapon<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> contents <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// this is nolonger possible</span></span>
<span class="line">    <span class="token comment">// fun consume(item: T) = contents.add(item)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is now possible</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> sniperRifle<span class="token operator">:</span> Case<span class="token operator">&lt;</span>SniperRifle<span class="token operator">&gt;</span> <span class="token operator">=</span> Case<span class="token operator">&lt;</span>SniperRifle<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> rifle <span class="token operator">=</span> Case<span class="token operator">&lt;</span>Rifle<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">rifle <span class="token operator">=</span> sniperRifle</span>
<span class="line">rifle<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if we declare <code>T</code> with an <code>in</code> modifier, it will be contravariant. Think of it as the other way around (sort of), because we can now consume <code>T</code> but we can&#39;t produce <code>T</code></p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">class</span> Case<span class="token operator">&lt;</span>oin T<span class="token operator">:</span> Weapon<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">val</span> contents <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// this is nolonger possible</span></span>
<span class="line">    <span class="token comment">// fun produce(): T = contents.last()</span></span>
<span class="line">    <span class="token keyword">fun</span> <span class="token function">consume</span><span class="token punctuation">(</span>item<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> contents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But here is where things get a little bit weird. Now a parent class will be the child of its child class, so <code>rifle</code> is now a subclass of <code>sniperRifle</code> so you treat it as if <code>rifle</code> is extending <code>sniperRifle</code> or as if weapon is extending knife and rifle</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> sniperRifle<span class="token operator">:</span> Case<span class="token operator">&lt;</span>SniperRifle<span class="token operator">&gt;</span> <span class="token operator">=</span> Case<span class="token operator">&lt;</span>SniperRifle<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> rifle <span class="token operator">=</span> Case<span class="token operator">&lt;</span>Rifle<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">sniperRifle <span class="token operator">=</span> rifle</span>
<span class="line">sniperRifle<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token function">Rifle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally what is all about with the <code>where</code> keyword? We use it when we want to extend from several interfaces and not just one. This is also called <em>an uppoer bound</em>. Suppose we have a function to sell weapons and we want to sell just weapons and usable ones (note the new interface I made usable). If the data type we pass is a weapon and is usable, we can proceed to use the function, otherwise we <em>can&#39;t</em>. This is only possible with function</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">sellWeapon</span><span class="token punctuation">(</span>weapon<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token keyword">where</span> T <span class="token operator">:</span> Weapon<span class="token punctuation">,</span> T <span class="token operator">:</span> Usable <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">weapon</span></span><span class="token string"> was just sold&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">&quot;success&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr>`,5)),n("h2",B,[n("a",x,[n("span",null,[e(o,{icon:"fa-brands fa-java"}),a[22]||(a[22]=s("Java 관련"))])])]),a[34]||(a[34]=n("h3",{id:"properties-파일객체-구성",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#properties-파일객체-구성"},[n("span",null,"Properties 파일객체 구성")])],-1)),n("blockquote",null,[n("p",null,[a[23]||(a[23]=s("파일: ")),e(o,{icon:"fas fa-folder-open"}),a[24]||(a[24]=n("code",null,"src/main/resources/props/",-1)),e(o,{icon:"fas fa-file-lines"}),a[25]||(a[25]=n("code",null,"globals.properties",-1))])]),a[35]||(a[35]=r(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code class="language-java"><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>markiiimark</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooBar</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Properties</span> config <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// ...[생략]...</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> io <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;props/globals.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>io<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ...[생략]...</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2)),e(d)])}const F=m(f,[["render",T]]),I=JSON.parse('{"path":"/programming/java/basics.html","title":"Basics","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Basics","description":"Java > Basics","icon":"fas fa-egg","category":["Java","Basics"],"tag":["java","jdk","jdk7","jdk8","singleton","enum","javadocs","kotlin","kdoc","companion-object","lombok","log4j","log4j2"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Basics\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/java/basics.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Basics"}],["meta",{"property":"og:description","content":"Java > Basics"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"log4j2"}],["meta",{"property":"article:tag","content":"log4j"}],["meta",{"property":"article:tag","content":"lombok"}],["meta",{"property":"article:tag","content":"companion-object"}],["meta",{"property":"article:tag","content":"kdoc"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"javadocs"}],["meta",{"property":"article:tag","content":"enum"}],["meta",{"property":"article:tag","content":"singleton"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"jdk7"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}]]},"git":{},"readingTime":{"minutes":3.17,"words":950},"filePathRelative":"programming/java/basics.md"}');export{F as comp,I as data};
