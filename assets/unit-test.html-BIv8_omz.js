import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as n,at as u,b as a,t as d,w as t,r as i,o as k,e as l}from"./app-DM0WOK1z.js";const m={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},h={class:"table-of-contents"};function b(o,s){const e=i("router-link"),p=i("TagLinks");return k(),r("div",null,[n("h1",g,[n("a",v,[n("span",null,d(o.$frontmatter.title)+" 관련",1)])]),n("nav",h,[n("ul",null,[n("li",null,[a(e,{to:"#intro"},{default:t(()=>s[0]||(s[0]=[l("Intro")])),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#xctest"},{default:t(()=>s[1]||(s[1]=[l("xctest")])),_:1})]),n("li",null,[a(e,{to:"#xctest-class"},{default:t(()=>s[2]||(s[2]=[l("xctest class")])),_:1})]),n("li",null,[a(e,{to:"#example"},{default:t(()=>s[3]||(s[3]=[l("Example")])),_:1})]),n("li",null,[a(e,{to:"#notable-xctassert"},{default:t(()=>s[4]||(s[4]=[l("Notable XCTAssert")])),_:1})]),n("li",null,[a(e,{to:"#summary"},{default:t(()=>s[5]||(s[5]=[l("Summary")])),_:1})])])])])]),s[6]||(s[6]=u(`<hr><h2 id="intro" tabindex="-1"><a class="header-anchor" href="#intro"><span>Intro</span></a></h2><ul><li>Unit tests are means of testing <strong>small bits of code</strong></li><li>This works well to <strong>reduce bugs</strong> in new and existing features</li><li>A unit test is essentially a <strong>function</strong> that <strong>invokes</strong> some code and <strong>asserts</strong> that certain conditions are satisfied during code execution</li></ul><h3 id="xctest" tabindex="-1"><a class="header-anchor" href="#xctest"><span><code>xctest</code></span></a></h3><ul><li>Xcode&#39;s <strong>testing framework</strong> for unit testing</li><li><strong>Integerates</strong> seamlessly with <strong>Xcode&#39;s testing workflow</strong></li><li>XCTests can be added when creating a <strong>new project</strong> or through <code>[File] &gt; [New] &gt; [Target] &gt; [Unit Testing Bundle]</code></li></ul><h3 id="xctest-class" tabindex="-1"><a class="header-anchor" href="#xctest-class"><span><code>xctest</code> class</span></a></h3><ul><li>Adding <code>@testable</code> attribute to import statement provides elevated access</li><li><code>setUp()</code> is called <em>before</em> each tests are run</li><li><code>tearDownWithError()</code> provides an opportunity to <strong>perform cleanup</strong> and to <strong>throw errors</strong> after each test</li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">XCTest</span></span>
<span class="line"><span class="token attribute atrule">@testable</span> <span class="token keyword">import</span> <span class="token class-name">BMI_Calculator</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">PROJECTNAMETests</span><span class="token punctuation">:</span> <span class="token class-name">XCTestCase</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">setUpWithError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tearDownWithError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span>Example</span></a></h3><ul><li>Test should be written as <strong>functions</strong>, the below struct calculates a user BMI - function need to be named as <code>test..()</code></li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">struct</span> <span class="token class-name">BMICalculator</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> weightKG<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">var</span> heightM<span class="token punctuation">:</span> <span class="token class-name">Double</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">returnBMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>weightKG<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>heightM <span class="token operator">*</span> heightM<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">BMI_CalculatorTests</span><span class="token punctuation">:</span> <span class="token class-name">XCTestCase</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">testBMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> bmiTest <span class="token operator">=</span> <span class="token class-name">BMICalculator</span><span class="token punctuation">(</span>weightKG<span class="token punctuation">:</span> <span class="token number">68</span><span class="token punctuation">,</span> heightM<span class="token punctuation">:</span> <span class="token number">1.77</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> result <span class="token operator">=</span> bmiTest<span class="token punctuation">.</span><span class="token function">returnBMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">XCTAssertEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">21.70512943279896</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="notable-xctassert" tabindex="-1"><a class="header-anchor" href="#notable-xctassert"><span>Notable <code>XCTAssert</code></span></a></h3><ul><li>There are seeveral <code>XCTAsserts</code> worth using, the xample below highlights a few of them:</li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">testNotableXCTAssert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Bool</span></span>
<span class="line">    <span class="token keyword">let</span> falseBoolResult <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token class-name">XCTAssertFalse</span><span class="token punctuation">(</span>falseBoolResult<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Nil</span></span>
<span class="line">    <span class="token keyword">let</span> nilResult<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token class-name">XCTAssertNil</span><span class="token punctuation">(</span>nilResult<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Greater Than / Less Than</span></span>
<span class="line">    <span class="token keyword">let</span> greaterThanResult <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line">    <span class="token class-name">XCTAssertGreaterThanOrEqual</span><span class="token punctuation">(</span>graterThanResult<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Strings</span></span>
<span class="line">    <span class="token keyword">let</span> notEqualString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Example&quot;</span></span></span>
<span class="line">    <span class="token class-name">XCTAssertNotEqual</span><span class="token punctuation">(</span>notEqualString<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Test?&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h3><ul><li>Testing reduces bugs - especially on <strong>larger</strong> project with several developers</li><li>Unit tests <strong>CAN</strong> be <strong>skipped</strong> or <strong>disabled</strong></li><li>All unit tests are functions that <strong>MUST</strong> include &quot;test&quot; in the <strong>function name</strong></li><li><strong>Keep tests simple</strong> so that you&#39;re only testing a <strong>unit</strong>.</li></ul>`,16)),a(p)])}const y=c(m,[["render",b]]),T=JSON.parse('{"path":"/programming/swift/unit-test.html","title":"Unit Test","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Unit Test","description":"Swift > Unit Test","icon":"fas fa-list-check","category":"Swift","tag":["ios","swift","xctest"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Unit Test\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/swift/unit-test.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Unit Test"}],["meta",{"property":"og:description","content":"Swift > Unit Test"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"xctest"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"ios"}]]},"git":{},"readingTime":{"minutes":1.01,"words":303},"filePathRelative":"programming/swift/unit-test.md"}');export{y as comp,T as data};
