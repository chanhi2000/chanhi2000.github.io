import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,d as s,at as r,b as a,t as d,w as e,r as i,o as k,e as p}from"./app-DM0WOK1z.js";const v={},m={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"};function h(l,n){const t=i("router-link"),o=i("TagLinks");return k(),u("div",null,[s("h1",m,[s("a",b,[s("span",null,d(l.$frontmatter.title)+" 관련",1)])]),s("nav",g,[s("ul",null,[s("li",null,[a(t,{to:"#string"},{default:e(()=>n[0]||(n[0]=[p("String")])),_:1})]),s("li",null,[a(t,{to:"#context"},{default:e(()=>n[1]||(n[1]=[p("Context")])),_:1})]),s("li",null,[a(t,{to:"#view"},{default:e(()=>n[2]||(n[2]=[p("View")])),_:1})]),s("li",null,[a(t,{to:"#misc"},{default:e(()=>n[3]||(n[3]=[p("Misc")])),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#declare-a-matrix-2d-array"},{default:e(()=>n[4]||(n[4]=[p("Declare a Matrix - 2D Array")])),_:1})]),s("li",null,[a(t,{to:"#sort-hashmap-by-value"},{default:e(()=>n[5]||(n[5]=[p("Sort hashMap by value")])),_:1})])])])])]),n[6]||(n[6]=r(`<hr><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span><code>String</code></span></a></h2><div class="code-block-with-title"><div class="code-block-title-bar" data-title="StringExt.kt"><span>StringExt.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Patterns</span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * [String.isValidEmail()]</span>
<span class="line"> * Check for a Valid Email address</span>
<span class="line"> * </span>
<span class="line"> * @return whether the input is valid for email address</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">isValidEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> pattern <span class="token operator">=</span> Patterns<span class="token punctuation">.</span>EMAIL_ADDRESS</span>
<span class="line">    <span class="token keyword">val</span> isEmail <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isEmail</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span><code>Context</code></span></a></h2><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ContextExt.kt"><span>ContextExt.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * [Context.copyToClipboard]</span>
<span class="line"> * Copy Text to ClipBoard</span>
<span class="line"> * </span>
<span class="line"> * @see ClipboardManager</span>
<span class="line"> * @see ClipData</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> Context<span class="token punctuation">.</span><span class="token function">copyToClipboard</span><span class="token punctuation">(</span>text<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> clipboard </span>
<span class="line">        <span class="token operator">=</span> <span class="token function">getSysteService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>CLIPBOARD_SERVICE<span class="token punctuation">)</span> <span class="token keyword">as</span> ClipboardManager</span>
<span class="line">    <span class="token keyword">val</span> clip <span class="token operator">=</span> ClipData<span class="token punctuation">.</span><span class="token function">newPlainText</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;label&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">)</span> </span>
<span class="line">    clipboard<span class="token punctuation">.</span><span class="token function">setPrimaryClip</span><span class="token punctuation">(</span>clip<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * [Context.getCityName]</span>
<span class="line"> * Get City Name</span>
<span class="line"> * @param latitude [Double]</span>
<span class="line"> * @param longitude [Oouble]</span>
<span class="line"> * @return [String] city name</span>
<span class="line"> * </span>
<span class="line"> * @see Geocoder</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> Context<span class="token punctuation">.</span><span class="token function">getCityName</span><span class="token punctuation">(</span>latitude<span class="token operator">:</span> Double<span class="token punctuation">,</span> longitude<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> geoCoder <span class="token operator">=</span> <span class="token function">Geocoder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> address <span class="token operator">=</span> geoCoder<span class="token punctuation">.</span><span class="token function">getFormLocation</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> address<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>locality</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * [Context.vibrate]</span>
<span class="line"> * Vibrate</span>
<span class="line"> * @param duration [Int] duration</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> Context<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span>duration<span class="token operator">:</span>Int <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> vibrator</span>
<span class="line">       <span class="token operator">=</span> <span class="token function">getSysteService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>VIBRATOR_SERVICE<span class="token punctuation">)</span> <span class="token keyword">as</span> Vibrator</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">&gt;=</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vibrator<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span>VibrationEffect<span class="token punctuation">.</span><span class="token function">createOneShot</span><span class="token punctuation">(</span>duration<span class="token punctuation">,</span> VibrationEffect<span class="token punctuation">.</span>DEFAULT_AMPLITUDE<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        vibrator<span class="token punctuation">.</span><span class="token function">vibrate</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="view" tabindex="-1"><a class="header-anchor" href="#view"><span><code>View</code></span></a></h2><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ViewExt.kt"><span>ViewExt.kt</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * [View.showKeyboard()]</span>
<span class="line"> * Show Keyboard</span>
<span class="line"> * @see InputMethodManager</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">showKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> imm </span>
<span class="line">        <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span> <span class="token keyword">as</span> InputMethodManager</span>
<span class="line">    imm<span class="token punctuation">.</span><span class="token function">toggleSoftInput</span><span class="token punctuation">(</span>InputMethodManager<span class="token punctuation">.</span>SHOW_FORCED<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * [View.hideKeyboard()]</span>
<span class="line"> * Hide Keyboard</span>
<span class="line"> * @see InputMethodManager</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">hideKeyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> imm </span>
<span class="line">        <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>INPUT_METHOD_SERVICE<span class="token punctuation">)</span> <span class="token keyword">as</span> InputMethodManager</span>
<span class="line">    imm<span class="token punctuation">.</span><span class="token function">hideSoftInputFromWindow</span><span class="token punctuation">(</span>windowToken<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="misc" tabindex="-1"><a class="header-anchor" href="#misc"><span>Misc</span></a></h2><h3 id="declare-a-matrix-2d-array" tabindex="-1"><a class="header-anchor" href="#declare-a-matrix-2d-array"><span>Declare a Matrix - 2D Array</span></a></h3><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Declare a Matrix - 2D Array"><span>Declare a Matrix - 2D Array</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">matrix</span><span class="token punctuation">(</span>height<span class="token operator">:</span> Int<span class="token punctuation">,</span> width<span class="token operator">:</span> Int<span class="token punctuation">,</span> initialize<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span> <span class="token operator">=</span></span>
<span class="line">    <span class="token function">Array</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">Array</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> board <span class="token operator">=</span> <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">board<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> row <span class="token operator">-&gt;</span></span>
<span class="line">    row<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> column <span class="token operator">-&gt;</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">columns</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;|\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// Output: </span></span>
<span class="line"><span class="token comment">// 0 0 0 0 0 |</span></span>
<span class="line"><span class="token comment">// 0 0 0 0 0 |</span></span>
<span class="line"><span class="token comment">// 0 0 0 0 0 |</span></span>
<span class="line"><span class="token comment">// 0 0 0 0 0 |</span></span>
<span class="line"><span class="token comment">// 0 0 0 0 0 |</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="sort-hashmap-by-value" tabindex="-1"><a class="header-anchor" href="#sort-hashmap-by-value"><span>Sort <code>hashMap</code> by value</span></a></h3><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Sort hashMap by value"><span>Sort hashMap by value</span></div><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">val</span> weights<span class="token operator">:</span> <span class="token function">hashMapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Foo&quot;</span></span> <span class="token keyword">to</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Bar&quot;</span></span> <span class="token keyword">to</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Baz&quot;</span></span> <span class="token keyword">to</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ascending order</span></span>
<span class="line"><span class="token keyword">val</span> sortedWeightsAsc </span>
<span class="line">    <span class="token operator">=</span> weights<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortedBy</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Descending order</span></span>
<span class="line"><span class="token keyword">val</span> sortedWeightsDesc </span>
<span class="line">    <span class="token operator">=</span> weights<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortedByDescending</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> v <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr>`,16)),a(o)])}const w=c(v,[["render",h]]),x=JSON.parse('{"path":"/programming/java-android/snippets-kotlin.html","title":"Kotlin Snippets","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Kotlin Snippets","description":"Android > Kotlin Snippets","icon":"iconfont icon-kotlin","category":["Java","Android","Kotlin Snippets"],"tag":["java","kotlin","kt","kts","android","android-studio","idea","intellij-idea","intellij"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kotlin Snippets\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/java-android/snippets-kotlin.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Kotlin Snippets"}],["meta",{"property":"og:description","content":"Android > Kotlin Snippets"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"intellij"}],["meta",{"property":"article:tag","content":"intellij-idea"}],["meta",{"property":"article:tag","content":"idea"}],["meta",{"property":"article:tag","content":"android-studio"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"kts"}],["meta",{"property":"article:tag","content":"kt"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"java"}]]},"git":{},"readingTime":{"minutes":1.14,"words":341},"filePathRelative":"programming/java-android/snippets-kotlin.md"}');export{w as comp,x as data};
