import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as s,at as k,b as a,t as d,w as e,e as t,r as o,o as m}from"./app-DM0WOK1z.js";const v={},g={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y={id:"kotlin",tabindex:"-1"},h={class:"header-anchor",href:"#kotlin"};function w(i,n){const l=o("VPIcon"),p=o("router-link"),c=o("TagLinks");return m(),r("div",null,[s("h1",g,[s("a",b,[s("span",null,d(i.$frontmatter.title)+" 관련",1)])]),s("nav",f,[s("ul",null,[s("li",null,[a(p,{to:"#kotlin"},{default:e(()=>[a(l,{icon:"iconfont icon-kotlin"}),n[0]||(n[0]=t("Kotlin"))]),_:1}),s("ul",null,[s("li",null,[a(p,{to:"#date"},{default:e(()=>n[1]||(n[1]=[t("Date")])),_:1})]),s("li",null,[a(p,{to:"#string"},{default:e(()=>n[2]||(n[2]=[t("String")])),_:1})]),s("li",null,[a(p,{to:"#retrofit"},{default:e(()=>n[3]||(n[3]=[t("Retrofit")])),_:1})])])])])]),n[5]||(n[5]=s("hr",null,null,-1)),s("h2",y,[s("a",h,[s("span",null,[a(l,{icon:"iconfont icon-kotlin"}),n[4]||(n[4]=t("Kotlin"))])])]),n[6]||(n[6]=k(`<h3 id="date" tabindex="-1"><a class="header-anchor" href="#date"><span>Date</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TIME_STAMP_FORMAT <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;EEEE. MMM d, yyyy - hh:mm:ss a&quot;</span></span></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> DATE_FORMAT <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;yyyy-MM-dd&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> Long<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> date <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> simpleDateFormat <span class="token operator">=</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span>TIME_STAMP_FORMAT<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    simpleDateFormat<span class="token punctuation">.</span>timeZone <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fun</span> Long<span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> date <span class="token operator">=</span> <span class="token function">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">val</span> simpleDateFormat <span class="token operator">=</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    simpleDateFormat<span class="token punctuation">.</span>timeZone <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>ParseException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">getDateUnixTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">val</span> simpleDateFormat <span class="token operator">=</span> <span class="token function">SimpleDateFormat</span><span class="token punctuation">(</span>DATE_FORMAT<span class="token punctuation">,</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        simpleDateFormat<span class="token punctuation">.</span>timeZone <span class="token operator">=</span> TimeZone<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">!!</span><span class="token punctuation">.</span>time</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ParseException<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token function">ParseException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Please Enter a valid date&quot;</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">val</span> currentTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">println</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token comment">// Sunday, September 20, 2020 - 10:48:26 AM</span></span>
<span class="line"><span class="token function">println</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getYearMonthDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 2020-09-20</span></span>
<span class="line"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2020-09-20&quot;</span></span><span class="token punctuation">.</span><span class="token function">getDateUnixTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 1600549200000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token comment">/**</span>
<span class="line"> * [String.isPasswordStrong]</span>
<span class="line"> * Check for password strength ...</span>
<span class="line"> * </span>
<span class="line"> * @return [Boolean] whether password is stong or not</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">isPasswordStrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">val</span> passwordREGEX <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;^&quot;</span></span> <span class="token operator">+</span> </span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;(?=.*[0-9])&quot;</span></span> <span class="token operator">+</span>  <span class="token comment">// at least 1 digit</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;(?=.*[a-z])&quot;</span></span> <span class="token operator">+</span>  <span class="token comment">// at least 1 lower case letter</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;(?=.*[A-Z])&quot;</span></span> <span class="token operator">+</span>  <span class="token comment">// at least 1 upper case letter</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;(?=.*[a-zA-Z])&quot;</span></span> <span class="token operator">+</span>  <span class="token comment">// any letter</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;(?=.*[@#$%^&amp;+=])&quot;</span></span> <span class="token operator">+</span>  <span class="token comment">// at least 1 special character</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;(?=\\\\S+$)&quot;</span></span> <span class="token operator">+</span>  <span class="token comment">// no white spaces</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;.{8,}&quot;</span></span> <span class="token operator">+</span> <span class="token comment">// at least 8 characters</span></span>
<span class="line">      <span class="token string-literal singleline"><span class="token string">&quot;$&quot;</span></span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> passwordREGEX<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="retrofit" tabindex="-1"><a class="header-anchor" href="#retrofit"><span>Retrofit</span></a></h3><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt"><pre><code class="language-kotlin"><span class="line"><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> Repository<span class="token punctuation">.</span><span class="token function">safeApiCall</span><span class="token punctuation">(</span></span>
<span class="line">    dispatcher<span class="token operator">:</span> CoroutineDispatcher<span class="token punctuation">,</span></span>
<span class="line">    apiCall<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T</span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> ApiResult<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">withContext</span><span class="token punctuation">(</span>dispatcher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">withTimeout</span><span class="token punctuation">(</span>NETWORK_TIMEOUT<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">delay</span><span class="token punctuation">(</span>NETWORK_DELAY<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">Success</span><span class="token punctuation">(</span>apiCall<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">when</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">is</span> TimeoutCancellationException <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">val</span> code <span class="token operator">=</span> <span class="token number">408</span></span>
<span class="line">                    <span class="token function">GenericError</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> NETWORK_ERROR_TIMEOUT<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">is</span> IOException <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    NetworkError</span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">is</span> HttpException <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">val</span> code <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">val</span> errorResponse <span class="token operator">=</span> <span class="token function">convertErrorBody</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token function">GenericError</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> errorResponse<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token function">GenericError</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> UNKNOWN_ERROR<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,7)),a(c)])}const D=u(v,[["render",w]]),S=JSON.parse('{"path":"/programming/java/snippets.html","title":"Snippets","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Snippets","description":"Java > Snippets","icon":"fas fa-eye-dropper","category":["Java","Snippets"],"tag":["java","jdk","jdk7","jdk8","singleton","enum","javadocs","kotlin","companion-object"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Snippets\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/java/snippets.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Snippets"}],["meta",{"property":"og:description","content":"Java > Snippets"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"companion-object"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"javadocs"}],["meta",{"property":"article:tag","content":"enum"}],["meta",{"property":"article:tag","content":"singleton"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"jdk7"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"java"}]]},"git":{},"readingTime":{"minutes":0.96,"words":289},"filePathRelative":"programming/java/snippets.md"}');export{D as comp,S as data};
