import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,d as s,at as p,b as t,t as h,w as l,e as a,au as d,av as k,r as o,o as g}from"./app-DM0WOK1z.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},y={class:"hint-container details"};function f(c,n){const e=o("router-link"),i=o("VPCard"),r=o("TagLinks");return g(),m("div",null,[s("h1",w,[s("a",x,[s("span",null,h(c.$frontmatter.title)+" 관련",1)])]),s("nav",v,[s("ul",null,[s("li",null,[t(e,{to:"#arrays-objects-pointers"},{default:l(()=>n[0]||(n[0]=[a("ARRAYS, OBJECTS, & POINTERS")])),_:1})]),s("li",null,[t(e,{to:"#cprogramming-com-bitwise-operators-in-c-and-c"},{default:l(()=>n[1]||(n[1]=[a("Cprogramming.com: Bitwise Operators in C and C++:")])),_:1})]),s("li",null,[t(e,{to:"#bit-twiddling-hacks"},{default:l(()=>n[2]||(n[2]=[a("Bit Twiddling Hacks")])),_:1})])])]),n[5]||(n[5]=p(`<hr><h2 id="arrays-objects-pointers" tabindex="-1"><a class="header-anchor" href="#arrays-objects-pointers"><span>ARRAYS, OBJECTS, &amp; POINTERS</span></a></h2><details class="hint-container details"><summary>ARRAYS, OBJECTS, &amp; POINTERS</summary><p>Consider the following C declaration:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This declares that the identifier <code>a</code> represents an object, which is an array. Arrays are simply collections of other objects, and in this example, those objects are chars. Thus the &quot;attribute list&quot; that describes the object <code>a</code> is:</p><blockquote><p><code>a</code> is an array of (4) <em>&lt;chars&gt;</em>.</p></blockquote><p>The word &quot;array&quot; is underlined to emphasize that the object &#39;a&#39; is first understood to be an array, even before we worry about the objects it contains. The text in italics and surrounded by angle brackets describes the kind of objects held within the array <code>a</code>.</p><p>The dimension is enclosed in parentheses since it really doesn&#39;t tell us much about the fundamental organization of the data, but only measures its extent. However, the dimension will be important later when we need to determine the &quot;<code>size</code>&quot; of <code>a</code>.</p><p>Applying this to declarations of arrays of two or more dimensions, such as:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">char</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>we can write the corresponding attribute lists as:</p><blockquote><p><code>b</code> is an array of (2) &lt;arrays of (4) chars&gt;.</p><p><code>c</code> is an array of (3) &lt;arrays of (2) arrays of (4) chars&gt;.</p></blockquote><p>First, note that <code>b</code> and <code>c</code> are both arrays of objects, just like <code>a</code> above. The only difference among <code>a</code>, <code>b</code>, and <code>c</code> is the type of objects that these arrays contain:</p><blockquote><p>The objects in <code>a</code> are <em>&lt;chars&gt;</em>.</p><p>The objects in <code>b</code> are <em>|&lt;arrays of (4) chars&gt;</em>.</p><p>The objects in <code>c</code> are <em>&lt;arrays of (2) arrays of (4) chars&gt;</em>.</p></blockquote><p>We may employ typedefs to emphasize this &quot;array of objects&quot; concept shared by <code>a</code>, <code>b</code>, and <code>c</code>:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">char</span> A_OBJECTS<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">char</span> B_OBJECTS<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">typedef</span> <span class="token keyword">char</span> C_OBJECTS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">A_OBJECTS a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 	<span class="token comment">// &#39;a&#39; is an array of (4) &lt;A_OBJECTS&gt;.</span></span>
<span class="line">B_OBJECTS b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 	<span class="token comment">// &#39;b&#39; is an array of (2) &lt;B_OBJECTS&gt;.</span></span>
<span class="line">C_OBJECTS c<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>		<span class="token comment">// &#39;c&#39; is an array of (3) &lt;C_OBJECTS&gt;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returning to the declaration of <code>a</code>, recall that the identifier <code>a</code> used without any subscript provides a constant address expression whose value is the base address of the array <code>a</code>. In effect, the words &quot;array of&quot; in the attribute list get replaced by the words &quot;pointer to&quot;:</p><blockquote><p><code>a</code> is a <strong>pointer</strong> to (the 1st of 4) <em>&lt;chars&gt;</em>.</p></blockquote><p>In a similar manner, we have:</p><blockquote><p><code>b</code> is a <strong>pointer</strong> to (the 1st of 2) <em>&lt;arrays of (4) chars&gt;</em>.</p><p><code>c</code> is a <strong>pointer</strong> to (the 1st of 3) <em>&lt;arrays of (2) arrays of (4) chars&gt;</em></p></blockquote><p>This understanding of the identifiers (without full subscripting) is crucial because their appearance in expressions involving pointer arithmetic demands that we understand the size of the objects. Thus,</p><blockquote><p>&#39;<code>a+1</code>&#39; is a <strong>pointer</strong> to the 2nd <em>&lt;char&gt;</em>.</p><p>&#39;<code>b+1</code>&#39; is a <strong>pointer</strong> to the 2nd <em>&lt;array of (4) chars&gt;</em>.</p><p>&#39;<code>c+1</code>&#39; is a <strong>pointer</strong> to the 2nd <em>&lt;array of (2) arrays of (4) chars&gt;</em>.</p></blockquote><p>Now it should be clear that the expressions &#39;<code>a[1]</code>&#39; and &#39;<code>*(a+1)</code>&#39; are equivalent, because both refer to the 2nd char in the array <code>a</code>. Internally, C compilers always convert a subscripted array reference into the equivalent pointer expression before compiling it<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup>. We can use this &quot;equivalence&quot; between subscripts and asterisks to determine whether or not a more complicated expression involving an array identifier is &quot;fully subscripted&quot; or not. For example, consider the expression:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Is this a char, a pointer to a char, or what?</p><p>If we go back to the declaration of <code>c</code>, we see that it is an array of three dimensions. Since the above expression contains one subscript and one asterisk, only two of the three dimensions have been taken care of within the expression. Since the expression is not fully subscripted, it yields a pointer, not a char.</p><p>In particular, since we know that the first two of three dimensions have been subscripted, then we can conclude that two of the three &quot;array of&quot; phrases within the attribute list of <code>c</code> have been &quot;removed&quot;. In other words, the object</p><blockquote><p><code>*(c[2]+1)</code> is an <strong>array</strong> of (4) <em>&lt;chars&gt;</em></p></blockquote><p>When used as an expression, it is treated as a pointer to the 1st of 4 chars. Adding 3 to this then provides a pointer to the 4th char.</p><p>Alternately, we could start with the attribute list of the identifier <code>c</code>, removing phrases as we add parts of the expression:</p><blockquote><p><code>c</code> is an <strong>array</strong> of (3) <em>&lt;arrays of (2) arrays of (4) chars&gt;</em>.</p><p>&#39;<code>c[2]</code>&#39; is (the 3rd) <strong>array</strong> of (2) <em>&lt;arrays of (4) chars&gt;</em>.</p><p>&#39;<code>c[2]</code>&#39; is a <strong>pointer</strong> to (the 1st of 2) <em>&lt;array of (4) chars&gt;</em>.</p><p>&#39;<code>c[2]+1</code>&#39; is a <strong>pointer</strong> to (the 2nd of 2) <em>&lt;array of (4) chars&gt;</em>.</p><p>&#39;<code>*(c[2]+1)</code>&#39; is (the 2nd) <strong>array</strong> of (4) <em>&lt;chars&gt;</em>.</p><p>&#39;<code>*(c[2]+1)</code>&#39; is a <strong>pointer</strong> to (the 1st of 4) <em>&lt;chars&gt;</em>.</p><p>&#39;<code>*(c[2]+1)+3</code>&#39; is a <strong>pointer</strong> to (the 4th of 4) <em>&lt;chars&gt;</em>.</p></blockquote></details><hr><h2 id="cprogramming-com-bitwise-operators-in-c-and-c" tabindex="-1"><a class="header-anchor" href="#cprogramming-com-bitwise-operators-in-c-and-c"><span>Cprogramming.com: Bitwise Operators in C and C++:</span></a></h2>`,5)),n[6]||(n[6]=s("details",{class:"hint-container details"},[s("summary",null,"Cprogramming.com: Bitwise Operators in C and C++:"),s("p",null,[a("Generally, as a programmer you don't need to concern yourself about operations at the bit lev el. You're free to think in by tes, or ints and doubles, or ev en higher lev el data ty pes composed of a combination of these. But there are times when you'd like to be able to go to the lev el of an indiv idual bit. "),s("strong",null,"Exclusive-or encryption"),a(" is one example when you need bitwise operations")]),s("p",null,[a("Another example comes up when dealing with data compression: what if you wanted to compress a file? In principle, this means taking one representation and turning it into a representation that takes less space. One way of doing this is to use an encoding that takes less than "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"8"),s("mtext",null," "),s("mtext",null,"bits")]),s("annotation",{encoding:"application/x-tex"},"8\\:\\text{bits}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"bits")])])])]),a(" to store a byte. (For instance, if you knew that you would only be using the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"26")]),s("annotation",{encoding:"application/x-tex"},"26")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"26")])])]),a(" letters of the Roman alphabet and didn't care about capitalization, you'd only need "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5"),s("mtext",null," "),s("mtext",null,"bits")]),s("annotation",{encoding:"application/x-tex"},"5\\:\\text{bits}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"5"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"bits")])])])]),a(" to do it.) In order to encode and decode files compressed in this manner, you need to actually extract data at the bit level.")]),s("p",null,"Finally, you can use bit operations to speed up your program or perform neat tricks. (This isn't always the best thing to do.)"),s("h3",{id:"thinking-about-bits",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#thinking-about-bits"},[s("span",null,"Thinking about Bits")])]),s("p",null,[a(`The byte is the lowest level at which we can access data; there's no "bit" type, and we can't ask for an indiv idual bit. In fact, we can't ev en perform operations on a single bit -- every bitwise operator will be applied to, at a minimum, an entire byte at a time. This means we'll be considering the whole representation of a number whenever we talk about apply ing a bitwise operator. (Note that this doesn't mean we can't ev er change only one bit at a time; it just means we have to be smart about how we do it.) Understanding what it means to apply a bitwise operator to an entire string of bits is probably easiest to see with the shifting operators. By convention, in C and C++ you can think about binary numbers as starting with the most significant bit to the left (`),s("em",null,"i.e."),a(", "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"10000000")]),s("annotation",{encoding:"application/x-tex"},"10000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10000000")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"128")]),s("annotation",{encoding:"application/x-tex"},"128")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"128")])])]),a(", and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000001")]),s("annotation",{encoding:"application/x-tex"},"00000001")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000001")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("). Regardless of underlying representation, you may treat this as true. As a consequence, the results of the left and right shift operators are not implementation dependent for unsigned numbers (for signed numbers, the right shift operator is implementation defined).")]),s("p",null,"The leftshift operator is the equivalent of moving all the bits of a number a specified number of places to the left:"),s("div",{class:"language-text line-numbers-mode","data-highlighter":"prismjs","data-ext":"text"},[s("pre",null,[s("code",{class:"language-text"},[s("span",{class:"line"},"[variable]<<[number of places]"),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,[a("For instance, consider the number "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"8")]),s("annotation",{encoding:"application/x-tex"},"8")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])])]),a(" written in binary "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00001000")]),s("annotation",{encoding:"application/x-tex"},"00001000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00001000")])])]),a(". If we wanted to shift it to the left "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" places, we'd end up with "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00100000")]),s("annotation",{encoding:"application/x-tex"},"00100000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00100000")])])]),a("; everything is moved to the left two places, and zeros are added as padding. This is the number "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"32")]),s("annotation",{encoding:"application/x-tex"},"32")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"32")])])]),a("—in fact, left shifting is the equivalent of multiplying by a power of two.")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"int"),a(),s("span",{class:"token function"},"mult_by_pow_2"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),a(" number"),s("span",{class:"token punctuation"},","),a(),s("span",{class:"token keyword"},"int"),a(" power"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("	"),s("span",{class:"token keyword"},"return"),a(" number"),s("span",{class:"token operator"},"<<"),a("power"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,[a("Note that in this example, we're using integers, which are either "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" or "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"4")]),s("annotation",{encoding:"application/x-tex"},"4")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4")])])]),a(" bytes, and that the operation gets applied to the entire sequence of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"16")]),s("annotation",{encoding:"application/x-tex"},"16")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16")])])]),a(" or "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"32")]),s("annotation",{encoding:"application/x-tex"},"32")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"32")])])]),a(" bits.")]),s("p",null,[a("But what happens if we shift a number like "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"128")]),s("annotation",{encoding:"application/x-tex"},"128")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"128")])])]),a(" and we're only storing it in a single byte: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"10000000")]),s("annotation",{encoding:"application/x-tex"},"10000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10000000")])])]),a("? Well, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"128"),s("mo",null,"×"),s("mn",null,"2"),s("mo",null,"="),s("mn",null,"256")]),s("annotation",{encoding:"application/x-tex"},"128\\times2=256")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"128"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"256")])])]),a(", and we can't even store a number that big in a byte, so it shouldn't be surprising that the result is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000000")]),s("annotation",{encoding:"application/x-tex"},"00000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000000")])])]),a(".")]),s("p",null,[a("It shouldn't surprise you that there's a corresponding right-shift operator: "),s("code",null,">>"),a(" (especially considering that I mentioned it earlier). Note that a bitwise right-shift will be the equivalent of integer division by "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(".")]),s("p",null,[a("Why is it integer division? Consider the number "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5")]),s("annotation",{encoding:"application/x-tex"},"5")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"5")])])]),a(", in binary, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000101")]),s("annotation",{encoding:"application/x-tex"},"00000101")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000101")])])]),a(". "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"5/2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"5/2")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2.5")]),s("annotation",{encoding:"application/x-tex"},"2.5")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2.5")])])]),a(", but if you are performing integer division, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"5"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"5/2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"5/2")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(". When you perform a right shift by one: "),s("code",null,"(unsigned int)5>>1"),a(", you end up with "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000010")]),s("annotation",{encoding:"application/x-tex"},"00000010")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000010")])])]),a(", as the rightmost "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" gets shifted off the end; this is the representation of the number "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(". Note that this only holds true for unsigned integers; otherwise, we are not guaranteed that the padding bits will be all "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a("s.")]),s("p",null,"Generally , using the left and right shift operators will result in significantly faster code than calculating and then multiply ing by a power of two. The shift operators will also be useful later when we look at how to manipulating indiv idual bits."),s("p",null,"For now, let's look at some of the other binary operators to see what they can do for us."),s("h3",{id:"bitwise-and",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bitwise-and"},[s("span",null,[a("Bitwise "),s("code",null,"AND")])])]),s("p",null,[a("The bitwise AND operator is a single ampersand: "),s("code",null,"&"),a(". A handy mnemonic is that the small version of the boolean "),s("code",null,"AND"),a(", "),s("code",null,"&&"),a(", works on smaller pieces (bits instead of bytes, chars, integers, etc). In essence, a binary "),s("code",null,"AND"),a(" simply takes the logical "),s("code",null,"AND"),a(" of the bits in each position of a number in binary form.")]),s("p",null,"For instance, working with a byte (the char type):"),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",rowlines:"none solid"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"01001000")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mi",{mathvariant:"normal"},"&")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"10111000")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"00001000")])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{matrix} &01001000\\\\ \\&&10111000\\\\\\hline &00001000 \\end{matrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"mord"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"&")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"01001000")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"10111000")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"00001000")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{style:{top:"-3.7em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"hline",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])])])])]),s("p",null,[a("The most significant bit of the first number is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", so we know the most significant bit of the result must be 0; in the second most significant bit, the bit of second number is zero, so we have the same result. The only time where both bits are "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", which is the only time the result will be "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", is the fifth bit from the left. Consequently,")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mn",null,"72"),s("mtext",null," "),s("mi",{mathvariant:"normal"},"&"),s("mtext",null," "),s("mn",null,"184"),s("mo",null,"="),s("mn",null,"8")]),s("annotation",{encoding:"application/x-tex"},"72\\:\\&\\:184=8 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord"},"72"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"&"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"184"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])])])])]),s("h3",{id:"bitwise-or",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bitwise-or"},[s("span",null,"Bitwise OR")])]),s("p",null,[a("Bitwise OR works almost exactly the same way as bitwise "),s("code",null,"AND"),a(". The only difference is that only one of the two bits needs to be a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" for that position's bit in the result to be "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".(If both bits are a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(",the result will also have a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" in that position.) The symbol is a pipe: "),s("code",null,"|"),a(". Again, this is similar to boolean logical operator, which is "),s("code",null,"||"),a(".")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",rowlines:"none solid"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"01001000")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mi",{mathvariant:"normal"},"∣")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"10111000")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"11111000")])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{matrix} &01001000\\\\ |&10111000\\\\\\hline &11111000 \\end{matrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"mord"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"∣")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"01001000")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"10111000")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"11111000")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{style:{top:"-3.7em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"hline",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])])])])]),s("p",null,"and consequently"),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mn",null,"72"),s("mtext",null," "),s("mi",{mathvariant:"normal"},"∥"),s("mtext",null," "),s("mn",null,"184"),s("mo",null,"="),s("mn",null,"248")]),s("annotation",{encoding:"application/x-tex"},"72\\:\\|\\:184=248 ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"72"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"∥"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"184"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"248")])])])])]),s("p",null,"Let's take a look at an example of when you could use just these four operators to do something potentially useful. Let's say that you wanted to keep track of certain boolean attributes about something -- for instance, you might have eight chars (!) and want to keep track of which are in use. Let's assign each of the cars a number from 0 to 7."),s("p",null,`Since we have eight items, all we really need is a single by te, and we'll use each of its eight bits to indicate whether or not a car is in use. To do this, we'll declare a char called in_use, and set it to zero. (We'll assume that none of the cars are initially "in use".)`),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"char"),a(" in_use "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,"Now, how can we check to make sure that a particular car is free before we try to use it? Well, we need to isolate the one bit that corresponds to that car. The strategy is simple: use bitwise operators to ensure every bit of the result is zero except, possibly , for the bit we want to extract."),s("p",null,[a("Consider trying to extract the fifth bit from the right of a number: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"X"),s("mi",null,"X"),s("mo",{stretchy:"false"},"?"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X")]),s("annotation",{encoding:"application/x-tex"},"XX?XXXXX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XX"),s("span",{class:"mclose"},"?"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXX")])])]),a(" We want to know what the question mark is, and we aren't concerned about the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"X")]),s("annotation",{encoding:"application/x-tex"},"X")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"X")])])]),a("s. We'd like to be sure that the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"X")]),s("annotation",{encoding:"application/x-tex"},"X")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"X")])])]),a(" bits don't interfere with our result, so we probably need to use a bitwise AND of some kind to make sure they are all zeros. What about the question mark? If it's a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", and we take the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(" of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"X"),s("mi",null,"X"),s("mo",{stretchy:"false"},"?"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X")]),s("annotation",{encoding:"application/x-tex"},"XX?XXXXX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XX"),s("span",{class:"mclose"},"?"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXX")])])]),a(" and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00100000")]),s("annotation",{encoding:"application/x-tex"},"00100000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00100000")])])]),a(", then the result will be "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00100000")]),s("annotation",{encoding:"application/x-tex"},"00100000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00100000")])])]),a(":")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",rowlines:"none solid"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"X"),s("mi",null,"X"),s("mn",null,"1"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mi",{mathvariant:"normal"},"&")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"00100000")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"00100000")])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{matrix} &XX1XXXXX\\\\ \\&&00100000\\\\\\hline &00100000 \\end{matrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"mord"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"&")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XX"),s("span",{class:"mord"},"1"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXX")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"00100000")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"00100000")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{style:{top:"-3.7em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"hline",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])])])])]),s("p",null,[a("Whereas, if it's a zero, then the result will be "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000000")]),s("annotation",{encoding:"application/x-tex"},"00000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000000")])])]),a(":")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",rowlines:"none solid"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"X"),s("mi",null,"X"),s("mn",null,"0"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mi",{mathvariant:"normal"},"&")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"00100000")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"00000000")])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{matrix} &XX0XXXXX\\\\ \\&&00100000\\\\\\hline &00000000 \\end{matrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"mord"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"&")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XX"),s("span",{class:"mord"},"0"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXX")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"00100000")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"00000000")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{style:{top:"-3.7em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"hline",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])])])])]),s("p",null,[a("So we get a non-zero number if, and only if, the bit we're interested in is a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".")]),s("p",null,"This procedure works for finding the bit in the nth position. The only thing left to do is to create a number with only the one bit in the correct position turned on. These are just powers of two, so one approach might be to do something like:"),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"int"),a(),s("span",{class:"token function"},"is_in_use"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),a(" car_num"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("	"),s("span",{class:"token comment"},"// pow returns an int, but in_use will also be promoted to an int")]),a(`
`),s("span",{class:"line"},[a("	"),s("span",{class:"token comment"},"// so it doesn't have any effect; we can think of this as an operation")]),a(`
`),s("span",{class:"line"},[a("	"),s("span",{class:"token comment"},"// between chars")]),a(`
`),s("span",{class:"line"},[a("	"),s("span",{class:"token keyword"},"return"),a(" in_use "),s("span",{class:"token operator"},"&"),a(),s("span",{class:"token function"},"pow"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"2"),s("span",{class:"token punctuation"},","),a(" car_num"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,[a("While this function works, it can be confusing. It obscures the fact that what we want to do is shift a bit ov er a certain number of places, sothat we have a number like "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00100000")]),s("annotation",{encoding:"application/x-tex"},"00100000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00100000")])])]),a("—a couple of zeros, a one, and some more zeros. (The one could also be first or last—"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"10000000")]),s("annotation",{encoding:"application/x-tex"},"10000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10000000")])])]),a(" or "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000001")]),s("annotation",{encoding:"application/x-tex"},"00000001")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000001")])])]),a(".)")]),s("p",null,[a("We can use a bitwise leftshift to accomplish this, and it'll be much faster to boot. If we start with the number "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", we are guaranteed to have only a single bit, and we know it's to the far-right. We'll keep in mind that car "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" will have its data stored in the rightmost bit, and car "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"7")]),s("annotation",{encoding:"application/x-tex"},"7")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"7")])])]),a(" will be the leftmost.")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"int"),a(),s("span",{class:"token function"},"is_in_use"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),a(" car_num"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("	"),s("span",{class:"token keyword"},"return"),a(" in_use "),s("span",{class:"token operator"},"&"),a(),s("span",{class:"token number"},"1"),s("span",{class:"token operator"},"<<"),a("car_num"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,"Note that shifting by zero places is a legal operation— we'll just get back the same number we started with."),s("p",null,"All we can do right now is check whether a car is in use; we can't actually set the in-use bit for it. There are two cases to consider: indicating a car is in use, and remov ing a car from use. In one case, we need to turn a bit on, and in the other, turn a bit off."),s("p",null,[a("Let's tackle the problem of turning the bit on. What does this suggest we should do? If we have a bit set to zero, the only way we know right now to set it to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" is to do a bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a(". Conv eniently , if we perform a bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a(" with only a single bit set to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" (the rest are "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a("),then we won't affect the rest of the number because anything "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a("ed with zero remains the same ("),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mtext",null," "),s("mtext",null,"OR"),s("mtext",null," "),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"1\\:\\text{OR}\\:0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"0")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mtext",null," "),s("mtext",null,"OR"),s("mtext",null," "),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0\\:\\text{OR}\\:0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"0")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(").")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"set_in_use"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),a(" car_num"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("	in_use "),s("span",{class:"token operator"},"="),a(" in_use "),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token number"},"1"),s("span",{class:"token operator"},"<<"),a("car_num"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,[a("What does this do? Take the case of setting the rightmost bit to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(": we have some number "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mtext",null," "),s("mi",{mathvariant:"normal"},"∣"),s("mtext",null," "),s("mn",null,"10000000")]),s("annotation",{encoding:"application/x-tex"},"0XXXXXXX\\:|\\:10000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXXXX"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"∣"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"10000000")])])]),a("; the result, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X")]),s("annotation",{encoding:"application/x-tex"},"1XXXXXXX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXXXX")])])]),a(". The shift is the same as before; the only difference is the operator and that we store the result.")]),s("p",null,"Setting a car to be no longer in use is a bit more complicated. For that, we'll need another operator. Again we need to move a single bit into the correct position:"),s("h3",{id:"the-bitwise-complement",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#the-bitwise-complement"},[s("span",null,"The Bitwise Complement")])]),s("p",null,[a("The bitwise complement operator, the tilde, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"∼")]),s("annotation",{encoding:"application/x-tex"},"\\sim")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"∼")])])]),a(", flips every bit. A useful way to remember this is that the tilde is sometimes called a twiddle, and the bitwise complement twiddles every bit: if you have a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", it's a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", and if you have a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", it's a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(".")]),s("p",null,"This turns out to be a great way of finding the largest possible value for an unsigned number:"),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"unsigned"),a(),s("span",{class:"token keyword"},"int"),a(" max "),s("span",{class:"token operator"},"="),a(),s("span",{class:"token operator"},"~"),s("span",{class:"token number"},"0"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", of course, is all "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a("s: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"00000000"),s("mtext",null," "),s("mn",null,"00000000")]),s("annotation",{encoding:"application/x-tex"},"00000000\\:00000000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"00000000"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"00000000")])])]),a(". Once we twiddle "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", we get all "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("s: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"11111111"),s("mtext",null," "),s("mn",null,"11111111")]),s("annotation",{encoding:"application/x-tex"},"11111111\\:11111111")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"11111111"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"11111111")])])]),a(". Since max is an unsigned int, we don't have to worry about sign bits or two's complement. We know that all "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("s is the largest possible number.")]),s("p",null,[a("Note that "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"∼")]),s("annotation",{encoding:"application/x-tex"},"\\sim")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"∼")])])]),a(" and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",{stretchy:"false"},"!")]),s("annotation",{encoding:"application/x-tex"},"!")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mclose"},"!")])])]),a(" cannot be used interchangeably. When you take the logical "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"NOT")]),s("annotation",{encoding:"application/x-tex"},"\\text{NOT}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"NOT")])])])]),a(" of a non-zero number, you get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" (FALSE). However, when you twiddle a non-zero number, the only time you'll get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" is when every bit is turned on. (This non-equivalence principle holds true for bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(" too, unless you know that you are using strictly the numbers "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(". For bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a(",to be certain that it would be equivalent, you'd need to make sure that the underlying representation of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" is all zeros to use it interchangeably. But don't do that! It'll make your code harder to understand.)")]),s("p",null,[a("Now that we have a way of flipping bits, we can start thinking about how to turn off a single bit. We know that we want to leave other bits unaffected, but that if we have a 1 in the given position, we want it to be a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(". Take some time to think about how to do this before reading further.")]),s("p",null,[a("We need to come up with a sequence of operations that leaves "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("s and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a("s in the non-target position unaffected; before, we used a bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a(", but we can also use a bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(". "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mtext",null," "),s("mtext",null,"AND"),s("mtext",null," "),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1\\:\\text{AND}\\:1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mtext",null," "),s("mtext",null,"AND"),s("mtext",null," "),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"0\\:\\text{AND}\\:1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(". Now, to turn off a bit, we just need to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(" it with "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(": "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mtext",null," "),s("mtext",null,"AND"),s("mtext",null," "),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"1\\:\\text{AND}\\:0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"0")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(". So if we want to indicate that car "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),a(" is no longer in use, we want to take the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(" of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mi",null,"X"),s("mn",null,"1"),s("mi",null,"X"),s("mi",null,"X")]),s("annotation",{encoding:"application/x-tex"},"XXXXX1XX")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XXXXX"),s("span",{class:"mord"},"1"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"XX")])])]),a(" with "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"11111011")]),s("annotation",{encoding:"application/x-tex"},"11111011")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"11111011")])])]),a(".")]),s("p",null,"How can we get that number? This is where the ability to take the complement of a number comes in handy: we already know how to turn a single bit on. If we turn one bit on and take the complement of the number, we get every bit on except that bit:"),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token operator"},"~"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),a(),s("span",{class:"token operator"},"<<"),a(" position"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,[a("Now that we have this, we can just take the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(" of this with the current field of cars, and the only bit we'll change is the one of the "),s("code",null,"car_num"),a(" we're interested in.")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"int"),a(),s("span",{class:"token function"},"set_unused"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),a(" car_num"),s("span",{class:"token punctuation"},")")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("	in_use "),s("span",{class:"token operator"},"="),a(" in_use "),s("span",{class:"token operator"},"&"),a(),s("span",{class:"token operator"},"~"),s("span",{class:"token punctuation"},"("),s("span",{class:"token number"},"1"),s("span",{class:"token operator"},"<<"),a("position"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},";")]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("p",null,"You might be thinking to yourself, but this is kind of clunky.We actually need to know whether a car is in use or not (if the bit is on or off) before we can know which function to call. While this isn't necessarily a bad thing, it means that we do need to know a little bit about what's going on. There is an easier way , but first we need the last bitwise operator: exclusiv e-or."),s("h3",{id:"bitwise-exclusive-or-xor",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bitwise-exclusive-or-xor"},[s("span",null,[a("Bitwise Exclusive-Or ("),s("code",null,"XOR"),a(")")])])]),s("p",null,[a("There is no boolean operator counterpart to bitwise exclusiv e-or, but there is a simple explanation. The exclusiv e-or operation takes two inputs and returns a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" if either one or the other of the inputs is a "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", but not if both are. That is, if both inputs are "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" or both inputs are "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", it returns "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(". Bitwise exclusiv e-or, with the operator of a carrot, "),s("code",null,"^"),a(", performs the exclusive-or operation on each pair of bits. Exclusive-or is commonly abbreviated "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(".")]),s("p",null,[a("For instance, if you have two numbers represented in binary as "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"10101010")]),s("annotation",{encoding:"application/x-tex"},"10101010")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"10101010")])])]),a(" and "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"01110010")]),s("annotation",{encoding:"application/x-tex"},"01110010")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"01110010")])])]),a(" then taking the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" results in "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"11011000")]),s("annotation",{encoding:"application/x-tex"},"11011000")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"11011000")])])]),a(". It's easier to see this if the bits are lined up correctly:")]),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.16em",columnalign:"center center",columnspacing:"1em",rowlines:"none solid"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"01110010")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mover",{accent:"true"},[s("mrow"),s("mo",null,"^")])])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"10101010")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mn",null,"11011000")])])])]),s("annotation",{encoding:"application/x-tex"},"\\begin{matrix} &01110010\\\\ \\hat{}&10101010\\\\\\hline &11011000 \\end{matrix} ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"3.6em","vertical-align":"-1.55em"}}),s("span",{class:"mord"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.05em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord accent"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6944em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})]),s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"accent-body",style:{left:"-0.25em"}},[s("span",{class:"mord"},"^")])])])])])])])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])]),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"arraycolsep",style:{width:"0.5em"}}),s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"2.05em"}},[s("span",{style:{top:"-4.21em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"01110010")])]),s("span",{style:{top:"-3.01em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"10101010")])]),s("span",{style:{top:"-1.81em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"11011000")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])]),s("span",{style:{top:"-3.7em"}},[s("span",{class:"pstrut",style:{height:"4.05em"}}),s("span",{class:"hline",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.55em"}},[s("span")])])])])])])])])]),s("p",null,[a("You can think of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" in the following way: you have some bit, either "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" or "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", that we'll call "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(". When you take "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"A\\:\\text{XOR}\\:0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"0")])])]),a(", then you always get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(" back: if "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", you get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(", and if "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", you get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(". On the other hand, when you take "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"A\\:\\text{XOR}\\:1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord"},"1")])])]),a(" , you flip "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(". If "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(", you get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("; if "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(" is "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a(" , you get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(".")]),s("p",null,[a("So you can think of the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" operation as a sort of selective twiddle: if you apply "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" to two numbers, one of which is all "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("s, you get the equivalent of a twiddle.")]),s("p",null,[a("Additionally , if you apply the "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" operation twice—say you have a bit, "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(", and another bit "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),a(", and you set "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"C")]),s("annotation",{encoding:"application/x-tex"},"C")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C")])])]),a(" equal to "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"A\\:\\text{XOR}\\:B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),a(", and then take "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"C"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"C\\:\\text{XOR}\\:B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),a(": you get "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mi",null,"B"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"A\\:\\text{XOR}\\:B\\:\\text{XOR}\\:B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),a(", which essentially either flips every bit of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(" twice, or never flips the bit, so you just get back "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"A")]),s("annotation",{encoding:"application/x-tex"},"A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"A")])])]),a(". (You can also think of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"B"),s("mtext",null," "),s("mtext",null,"XOR"),s("mtext",null," "),s("mi",null,"B")]),s("annotation",{encoding:"application/x-tex"},"B\\:\\text{XOR}\\:B")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B")])])]),a(" as cancelling out.) As an exercise, can you think of a way to use this to exchange two integer variables without a temporary variable? (Once you've figured it out, check the solution.)")]),s("p",null,[a("How does that help us? Well, remember the first principle: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a("ing a bit with "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" results in the same bit. So what we'd really like to be able to do is just call one function that flips the bit of the car we're interested in—it doesn't matter if it's being turned on or turned off—and leaves the rest of the bits unchanged.")]),s("p",null,[a("This sounds an awful lot like the what we've done in the past; in fact, we only need to make one change to our function to turn a bit on. Instead of using a bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a(", we use a bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(". This leaves every thing unchanged, but flips the bit instead of alway s turning it on:")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token keyword"},"void"),a(),s("span",{class:"token function"},"flip_use_state"),s("span",{class:"token punctuation"},"("),s("span",{class:"token keyword"},"int"),a(" car_num"),s("span",{class:"token punctuation"},")"),a()]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"{")]),a(`
`),s("span",{class:"line"},[a("	in_use "),s("span",{class:"token operator"},"="),a(" in_use "),s("span",{class:"token operator"},"^"),a(),s("span",{class:"token number"},"1"),s("span",{class:"token operator"},"<<"),a("car_num"),s("span",{class:"token punctuation"},";"),a()]),a(`
`),s("span",{class:"line"},[s("span",{class:"token punctuation"},"}")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])]),s("h3",{id:"when-should-you-use-bitwise-operators",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#when-should-you-use-bitwise-operators"},[s("span",null,"When should you use bitwise operators?")])]),s("p",null,[a("Bitwise operators are good for saving space—but many times, space is hardly an issue. And one problem with working at the level of the individual bits is that if you decide you need more space or want to save some time—for instance, if we needed to store information about "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"9")]),s("annotation",{encoding:"application/x-tex"},"9")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"9")])])]),a(" cars instead of "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"8")]),s("annotation",{encoding:"application/x-tex"},"8")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"8")])])]),a("—then you might have to redesign large portions of your program.")]),s("p",null,[a("On the other hand, sometimes you can use bitwise operators to cleverly remove dependencies, such as by using "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mo",null,"∼"),s("mn",null,"0")]),s("annotation",{encoding:"application/x-tex"},"\\sim0")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.3669em"}}),s("span",{class:"mrel"},"∼"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0")])])]),a(" to find the largest possible integer. And bit shifting to multiply by two is a fairly common operation, so it doesn't affect readability in the way that advanced use of bit manipulation can in some cases (for instance, using "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" to switch the values stored in two variables).")]),s("p",null,"There are also times when you need to use bitwise operators: if you're working with compression or some forms of encryption, or if you're working on a system that expects bit fields to be used to store boolean attributes."),s("h3",{id:"summary",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#summary"},[s("span",null,"Summary")])]),s("p",null,"You should now be familiar with six bitwise operators:"),s("h4",{id:"works-on-bits-for-left-argument-takes-an-integer-as-a-second-argument",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#works-on-bits-for-left-argument-takes-an-integer-as-a-second-argument"},[s("span",null,"Works on bits for left argument, takes an integer as a second argument")])]),s("p",null,[a("Shifts bits to of "),s("code",null,"bit_arg"),a(),s("code",null,"shift_arg"),a(" places to the left—equivalent to multiplication by "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mtext",null,"shift_arg")])]),s("annotation",{encoding:"application/x-tex"},"2^{\\text{shift\\_arg}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8491em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord text mtight"},[s("span",{class:"mord mtight"},"shift_arg")])])])])])])])])])])])]),a(".")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[a("bit_arg "),s("span",{class:"token operator"},"<<"),a(" shift_arg")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,[a("Shifts bits to of "),s("code",null,"bit_arg"),a(),s("code",null,"shift_arg"),a(" places to the right—equivalent to integer division by "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mtext",null,"shift_arg")])]),s("annotation",{encoding:"application/x-tex"},"2^{\\text{shift\\_arg}}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8491em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8491em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord text mtight"},[s("span",{class:"mord mtight"},"shift_arg")])])])])])])])])])])])]),a(".")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[a("bit_arg "),s("span",{class:"token operator"},">>"),a(" shift_arg")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("h4",{id:"works-on-the-bits-of-both-arguments",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#works-on-the-bits-of-both-arguments"},[s("span",null,"Works on the bits of both arguments")])]),s("p",null,[a("Takes the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"AND")]),s("annotation",{encoding:"application/x-tex"},"\\text{AND}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"AND")])])])]),a(" of "),s("code",null,"left_arg"),a(" and "),s("code",null,"right_arg")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[a("left_arg "),s("span",{class:"token operator"},"&"),a(" right_arg")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,[a("Takes the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"XOR")]),s("annotation",{encoding:"application/x-tex"},"\\text{XOR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"XOR")])])])]),a(" of "),s("code",null,"left_arg"),a(" and "),s("code",null,"right_arg")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[a("left_arg "),s("span",{class:"token operator"},"^"),a(" right_arg")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("p",null,[a("Takes the bitwise "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"OR")]),s("annotation",{encoding:"application/x-tex"},"\\text{OR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord text"},[s("span",{class:"mord"},"OR")])])])]),a(" of "),s("code",null,"left_arg"),a(" and "),s("code",null,"right_arg")]),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[a("left_arg "),s("span",{class:"token operator"},"|"),a(" right_arg")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("h4",{id:"works-on-the-bits-of-only-argument",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#works-on-the-bits-of-only-argument"},[s("span",null,"Works on the bits of only argument")])]),s("p",null,"Reverses the bits of arg"),s("div",{class:"language-c line-numbers-mode","data-highlighter":"prismjs","data-ext":"c"},[s("pre",null,[s("code",{class:"language-c"},[s("span",{class:"line"},[s("span",{class:"token operator"},"~"),a("arg")]),a(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])]),s("h4",{id:"skills-and-knowledge",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#skills-and-knowledge"},[s("span",null,"Skills and knowledge")])]),s("p",null,"You also know a couple of neat tricks that you can use when performance is critical, or space is slow, or you just need to isolate and manipulate individual bits of a number."),s("p",null,"And you now should have a better sense of what goes on at the lowest levels of your computer.")],-1)),n[7]||(n[7]=s("hr",null,null,-1)),n[8]||(n[8]=s("h2",{id:"bit-twiddling-hacks",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bit-twiddling-hacks"},[s("span",null,"Bit Twiddling Hacks")])],-1)),s("details",y,[n[3]||(n[3]=s("summary",null,"Bit Twiddling Hacks",-1)),t(i,d(k({title:"Bit Twiddling Hacks",desc:"Bit Twiddling Hacks",link:"http://graphics.stanford.edu/~seander/bithacks.html",logo:"http://graphics.stanford.edu/favicon.ico",color:"rgba(255,255,255,0.2)"})),null,16),n[4]||(n[4]=p(`<h3 id="about-the-operation-counting-methodology" tabindex="-1"><a class="header-anchor" href="#about-the-operation-counting-methodology"><span>About the operation counting methodology</span></a></h3><p>When totaling the number of operations for algorithms here, any C operator is counted as one operation. Intermediate assignments, which need not be written to RAM, are not counted. Of course, this operation counting approach only serves as an approximation of the actual number of machine instructions and CPU time. All operations are assumed to take the same amount of time, which is not true in reality, but CPUs have been heading increasingly in this direction over time. There are many nuances that determine how fast a system will run a given sample of code, such as cache sizes, memory bandwidths, instruction sets, etc. In the end, benchmarking is the best way to determine whether one method is really faster than another, so consider the techniques below as possibilities to test on your target architecture.</p><h3 id="compute-the-sign-of-an-integer" tabindex="-1"><a class="header-anchor" href="#compute-the-sign-of-an-integer"><span>Compute the sign of an integer</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> v<span class="token punctuation">;</span>      <span class="token comment">// we want to find the sign of v</span></span>
<span class="line"><span class="token keyword">int</span> sign<span class="token punctuation">;</span>   <span class="token comment">// the result goes here </span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// CHAR_BIT is the number of bits per byte (normally 8).</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>v <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// if v &lt; 0 then -1, else 0. </span></span>
<span class="line"><span class="token comment">// or, to avoid branching on CPUs with flag registers (IA32):</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or, for one less instruction (but not portable):</span></span>
<span class="line">sign <span class="token operator">=</span> v <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The last expression above evaluates to sign = <code>v &gt;&gt; 31</code> for 32-bit integers. This is one operation faster than the obvious way, sign = <code>-(v &lt; 0)</code>. This trick works because when signed integers are shifted right, the value of the far left bit is copied to the other bits. The far left bit is 1 when the value is negative and <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> otherwise; all <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> bits gives <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>. Unfortunately, this behavior is architecture-specific.</p><p>Alternatively, if you prefer the result be either <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span>, then use:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">// if v &lt; 0 then -1, else +1</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>On the other hand, if you prefer the result be either <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, or <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span>, then use:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">// Or, for more speed but less portability:</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Or, for portability, brevity, and (perhaps) speed:</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// -1, 0, or +1</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>v <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1, 0, or +1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If instead you want to know if something is non-negative, resulting in <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span> or else <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, then use:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token comment">// if v &lt; 0 then 0, else 1</span></span>
<span class="line">sign <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Caveat</strong>: On March 7, 2003, Angus Duggan pointed out that the 1989 ANSI C specification leaves the result of signed right-shift implementation-defined, so on some systems this hack might not work. For greater portability, Toby Speight suggested on September 28, 2005 that CHAR_BIT be used here and throughout rather than assuming bytes were 8 bits long. Angus recommended the more portable versions above, involving casting on March 4, 2006. <a href="http://rpg-314.blogspot.com/" target="_blank" rel="noopener noreferrer">Rohit Garg</a> suggested the version for non-negative integers on September 12, 2009.</p><h3 id="detect-if-two-integers-have-opposite-signs" tabindex="-1"><a class="header-anchor" href="#detect-if-two-integers-have-opposite-signs"><span>Detect if two integers have opposite signs</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>               <span class="token comment">// input values to compare signs</span></span>
<span class="line">bool f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true iff x and y have opposite signs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Manfred Weis suggested I add this entry on November 26, 2009.</p><h3 id="compute-the-integer-absolute-value-abs-without-branching" tabindex="-1"><a class="header-anchor" href="#compute-the-integer-absolute-value-abs-without-branching"><span>Compute the integer absolute value (abs) without branching</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> v<span class="token punctuation">;</span>           <span class="token comment">// we want to find the absolute value of v</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> r<span class="token punctuation">;</span>  <span class="token comment">// the result goes here </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token keyword">const</span> mask <span class="token operator">=</span> v <span class="token operator">&gt;&gt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">+</span> mask<span class="token punctuation">)</span> <span class="token operator">^</span> mask<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Patented variation:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">^</span> mask<span class="token punctuation">)</span> <span class="token operator">-</span> mask<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Some CPUs don&#39;t have an integer absolute value instruction (or the compiler fails to use them). On machines where branching is expensive, the above expression can be faster than the obvious approach, <code>r = (v &lt; 0) ? -(unsigned)v : v</code>, even though the number of operations is the same.</p><p>On March 7, 2003, Angus Duggan pointed out that the 1989 ANSI C specification leaves the result of signed right-shift implementation-defined, so on some systems this hack might not work. I&#39;ve read that ANSI C does not require values to be represented as two&#39;s complement, so it may not work for that reason as well (on a diminishingly small number of old machines that still use one&#39;s complement). On March 14, 2004, Keith H. Duggar sent me the patented variation above; it is superior to the one I initially came up with, <code>r=(+1|(v&gt;&gt;(sizeof(int)*CHAR_BIT-1)))*v</code>, because a multiply is not used. Unfortunately, this method has been <a href="http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&amp;Sect2=HITOFF&amp;p=1&amp;u=/netahtml/search-adv.htm&amp;r=1&amp;f=G&amp;l=50&amp;d=ptxt&amp;S1=6073150&amp;OS=6073150&amp;RS=6073150" target="_blank" rel="noopener noreferrer">patented</a> in the USA on June 6, 2000 by Vladimir Yu Volkonsky and assigned to <a href="http://www.sun.com/" target="_blank" rel="noopener noreferrer">Sun Microsystems</a>. On August 13, 2006, Yuriy Kaminskiy told me that the patent is likely invalid because the method was published well before the patent was even filed, such as in <a href="http://www.goof.com/pcg/doc/pentopt.txt" target="_blank" rel="noopener noreferrer">How to Optimize for the Pentium Processor</a> by Agner Fog, dated November, 9, 1996. Yuriy also mentioned that this document was translated to Russian in 1997, which Vladimir could have read. Moreover, the Internet Archive also has an old <a href="http://web.archive.org/web/19961201174141/www.x86.org/ftp/articles/pentopt/PENTOPT.TXT" target="_blank" rel="noopener noreferrer">link</a> to it. On January 30, 2007, Peter Kankowski shared with me an <a href="http://smallcode.weblogs.us/2007/01/31/microsoft-probably-uses-the-abs-function-patented-by-sun/" target="_blank" rel="noopener noreferrer">abs version</a> he discovered that was inspired by Microsoft&#39;s Visual C++ compiler output. It is featured here as the primary solution. On December 6, 2007, Hai Jin complained that the result was signed, so when computing the abs of the most negative value, it was still negative. On April 15, 2008 Andrew Shapira pointed out that the obvious approach could overflow, as it lacked an (unsigned) cast then; for maximum portability he suggested <code>(v &lt; 0) ? (1 + ((unsigned)(-1-v))) : (unsigned)v</code>. But citing the ISO C99 spec on July 9, 2008, Vincent Lefèvre convinced me to remove it becasue even on non-2s-complement machines <code>-(unsigned)v</code> will do the right thing. The evaluation of <code>-(unsigned)v</code> first converts the negative value of <code>v</code> to an unsigned by adding <code>2**N</code>, yielding a 2s complement representation of v&#39;s value that I&#39;ll call U. Then, U is negated, giving the desired result, <code>-U = 0 - U = 2**N - U = 2**N - (v+2**N) = -v = abs(v)</code>.</p><h3 id="compute-the-minimum-min-or-maximum-max-of-two-integers-without-branching" tabindex="-1"><a class="header-anchor" href="#compute-the-minimum-min-or-maximum-max-of-two-integers-without-branching"><span>Compute the minimum (min) or maximum (max) of two integers without branching</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token comment">// we want to find the minimum of x and y</span></span>
<span class="line"><span class="token keyword">int</span> y<span class="token punctuation">;</span>   </span>
<span class="line"><span class="token keyword">int</span> r<span class="token punctuation">;</span>  <span class="token comment">// the result goes here </span></span>
<span class="line"></span>
<span class="line">r <span class="token operator">=</span> y <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// min(x, y)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On some rare machines where branching is very expensive and no condition move instructions exist, the above expression might be faster than the obvious approach, <code>r = (x &lt; y) ? x : y</code>, even though it involves two more instructions. (Typically, the obvious approach is best, though.) It works because if <code>x &lt; y</code>, then <code>-(x &lt; y)</code> will be all ones, so <code>r = y ^ (x ^ y) &amp; ~0 = y ^ x ^ y = x</code>. Otherwise, if <code>x &gt;= y</code>, then <code>-(x &lt; y)</code> will be all zeros, so <code>r = y ^ ((x ^ y) &amp; 0) = y</code>. On some machines, evaluating <code>(x &lt; y)</code> as 0 or 1 requires a branch instruction, so there may be no advantage.</p><p>To find the maximum, use:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">r <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">-</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// max(x, y)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="quick-and-dirty-versions" tabindex="-1"><a class="header-anchor" href="#quick-and-dirty-versions"><span>Quick and dirty versions:</span></a></h4><p>If you know that <code>INT_MIN &lt;= x - y &lt;= INT_MAX</code>, then you can use the following, which are faster because <code>(x - y)</code> only needs to be evaluated once.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">r <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// min(x, y)</span></span>
<span class="line">r <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// max(x, y)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the 1989 ANSI C specification doesn&#39;t specify the result of signed right-shift, so these aren&#39;t portable. If exceptions are thrown on overflows, then the values of <code>x</code> and <code>y</code> should be unsigned or cast to unsigned for the subtractions to avoid unnecessarily throwing an exception, however the right-shift needs a signed operand to produce all one bits when negative, so cast to signed there.</p><p>On March 7, 2003, Angus Duggan pointed out the right-shift portability issue. On May 3, 2005, Randal E. Bryant alerted me to the need for the precondition, <code>INT_MIN &lt;= x - y &lt;= INT_MAX</code>, and suggested the non-quick and dirty version as a fix. Both of these issues concern only the quick and dirty version. Nigel Horspoon observed on July 6, 2005 that gcc produced the same code on a Pentium as the obvious solution because of how it evaluates <code>(x &lt; y)</code>. On July 9, 2008 Vincent Lefèvre pointed out the potential for overflow exceptions with subtractions in <code>r = y + ((x - y) &amp; -(x &lt; y))</code>, which was the previous version. Timothy B. Terriberry suggested using xor rather than add and subract to avoid casting and the risk of overflows on June 2, 2009.</p><h3 id="determining-if-an-integer-is-a-power-of-2" tabindex="-1"><a class="header-anchor" href="#determining-if-an-integer-is-a-power-of-2"><span>Determining if an integer is a power of 2</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// we want to see if v is a power of 2</span></span>
<span class="line">bool f<span class="token punctuation">;</span>         <span class="token comment">// the result goes here </span></span>
<span class="line"></span>
<span class="line">f <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> is incorrectly considered a power of <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> here. To remedy this, use:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">f <span class="token operator">=</span> v <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token punctuation">(</span>v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="sign-extending-from-a-constant-bit-width" tabindex="-1"><a class="header-anchor" href="#sign-extending-from-a-constant-bit-width"><span>Sign extending from a constant bit-width</span></a></h3><p>Sign extension is automatic for built-in types, such as chars and ints. But suppose you have a signed two&#39;s complement number, x, that is stored using only b bits. Moreover, suppose you want to convert <code>x</code> to an int, which has more than b bits. A simple copy will work if <code>x</code> is positive, but if negative, the sign must be extended. For example, if we have only 4 bits to store a number, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">-3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">3</span></span></span></span> is represented as <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1101</mn></mrow><annotation encoding="application/x-tex">1101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1101</span></span></span></span> in binary. If we have <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">8</span></span></span></span> bits, then <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">-3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">3</span></span></span></span> is <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>11111101</mn></mrow><annotation encoding="application/x-tex">11111101</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111101</span></span></span></span>. The most-significant bit of the 4-bit representation is replicated sinistrally to fill in the destination when we convert to a representation with more bits; this is sign extending. In C, sign extension from a constant bit-width is trivial, since bit fields may be specified in structs or unions. For example, to convert from 5 bits to an full integer:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token comment">// convert this from using 5 bits to a full int</span></span>
<span class="line"><span class="token keyword">int</span> r<span class="token punctuation">;</span> <span class="token comment">// resulting sign extended number goes here</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">signed</span> <span class="token keyword">int</span> x<span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span> s<span class="token punctuation">;</span></span>
<span class="line">r <span class="token operator">=</span> s<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following is a C++ template function that uses the same language feature to convert from B bits in one operation (though the compiler is generating more, of course).</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">unsigned</span> B<span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">inline</span> T <span class="token function">signextend</span><span class="token punctuation">(</span><span class="token keyword">const</span> T x<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">struct</span> <span class="token punctuation">{</span>T x<span class="token operator">:</span>B<span class="token punctuation">;</span><span class="token punctuation">}</span> s<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> s<span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token generic-function"><span class="token function">signextend</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">signed</span> <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// sign extend 5 bit number x to r</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>John Byrd caught a typo in the code (attributed to html formatting) on May 2, 2005. On March 4, 2006, Pat Wood pointed out that the ANSI C standard requires that the bitfield have the keyword &quot;signed&quot; to be signed; otherwise, the sign is undefined.</p><h3 id="sign-extending-from-a-variable-bit-width" tabindex="-1"><a class="header-anchor" href="#sign-extending-from-a-variable-bit-width"><span>Sign extending from a variable bit-width</span></a></h3><p>Sometimes we need to extend the sign of a number but we don&#39;t know a priori the number of bits, <code>b</code>, in which it is represented. (Or we could be programming in a language like Java, which lacks bitfields.)</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> b<span class="token punctuation">;</span> <span class="token comment">// number of bits representing the number in x</span></span>
<span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span>      <span class="token comment">// sign extend this b-bit number to r</span></span>
<span class="line"><span class="token keyword">int</span> r<span class="token punctuation">;</span>      <span class="token comment">// resulting sign-extended number</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token number">1U</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mask can be pre-computed if b is fixed</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1U</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (Skip this if bits in x above position b are already zero.)</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> m<span class="token punctuation">)</span> <span class="token operator">-</span> m<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code above requires four operations, but when the bitwidth is a constant rather than variable, it requires only two fast operations, assuming the upper bits are already zeroes.</p><p>A slightly faster but less portable method that doesn&#39;t depend on the bits in x above position b being zero is:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">int</span> <span class="token keyword">const</span> m <span class="token operator">=</span> CHAR_BIT <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> b<span class="token punctuation">;</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Sean A. Irvine suggested that I add sign extension methods to this page on June 13, 2004, and he provided <code>m = (1 &lt;&lt; (b - 1)) - 1; r = -(x &amp; ~m) | x;</code> as a starting point from which I optimized to get <code>m = 1U &lt;&lt; (b - 1); r = -(x &amp; m) | x</code>. But then on May 11, 2007, Shay Green suggested the version above, which requires one less operation than mine. Vipin Sharma suggested I add a step to deal with situations where x had possible ones in bits other than the b bits we wanted to sign-extend on Oct. 15, 2008. On December 31, 2009 Chris Pirazzi suggested I add the faster version, which requires two operations for constant bit-widths and three for variable widths.</p><h3 id="sign-extending-from-a-variable-bit-width-in-3-operations" tabindex="-1"><a class="header-anchor" href="#sign-extending-from-a-variable-bit-width-in-3-operations"><span>Sign extending from a variable bit-width in 3 operations</span></a></h3><p>The following may be slow on some machines, due to the effort required for multiplication and division. This version is 4 operations. If you know that your initial bit-width, b, is greater than 1, you might do this type of sign extension in 3 operations by using <code>r = (x * multipliers[b]) / multipliers[b]</code>, which requires only one array lookup.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> b<span class="token punctuation">;</span> <span class="token comment">// number of bits representing the number in x</span></span>
<span class="line"><span class="token keyword">int</span> x<span class="token punctuation">;</span>      <span class="token comment">// sign extend this b-bit number to r</span></span>
<span class="line"><span class="token keyword">int</span> r<span class="token punctuation">;</span>      <span class="token comment">// resulting sign-extended number</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">M</span><span class="token expression"><span class="token punctuation">(</span>B<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1U</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT<span class="token punctuation">)</span> <span class="token operator">-</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span> </span><span class="token comment">// CHAR_BIT=bits/byte</span></span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token keyword">const</span> multipliers<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// (add more if using more than 64 bits)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token keyword">const</span> divisors<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token operator">~</span><span class="token function">M</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">M</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// (add more for 64 bits)</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">M</span></span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> multipliers<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> divisors<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The following variation is not portable, but on architectures that employ an arithmetic right-shift, maintaining the sign, it should be fast.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">const</span> <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token punctuation">;</span> <span class="token comment">// OR:  sizeof(x) * CHAR_BIT - b;</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Randal E. Bryant pointed out a bug on May 3, 2005 in an earlier version (that used <code>multipliers[]</code> for <code>divisors[]</code>), where it failed on the case of <code>x=1</code> and <code>b=1</code>.</p><h3 id="conditionally-set-or-clear-bits-without-branching" tabindex="-1"><a class="header-anchor" href="#conditionally-set-or-clear-bits-without-branching"><span>Conditionally set or clear bits without branching</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">bool f<span class="token punctuation">;</span>         <span class="token comment">// conditional flag</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment">// the bit mask</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> w<span class="token punctuation">;</span> <span class="token comment">// the word to modify:  if (f) w |= m; else w &amp;= ~m; </span></span>
<span class="line"></span>
<span class="line">w <span class="token operator">^=</span> <span class="token punctuation">(</span><span class="token operator">-</span>f <span class="token operator">^</span> w<span class="token punctuation">)</span> <span class="token operator">&amp;</span> m<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// OR, for superscalar CPUs:</span></span>
<span class="line">w <span class="token operator">=</span> <span class="token punctuation">(</span>w <span class="token operator">&amp;</span> <span class="token operator">~</span>m<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token operator">-</span>f <span class="token operator">&amp;</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On some architectures, the lack of branching can more than make up for what appears to be twice as many operations. For instance, informal speed tests on an AMD Athlon™ XP 2100+ indicated it was 5-10% faster. An Intel Core 2 Duo ran the superscalar version about 16% faster than the first. Glenn Slayden informed me of the first expression on December 11, 2003. Marco Yu shared the superscalar version with me on April 3, 2007 and alerted me to a typo 2 days later.</p><h3 id="conditionally-negate-a-value-without-branching" tabindex="-1"><a class="header-anchor" href="#conditionally-negate-a-value-without-branching"><span>Conditionally negate a value without branching</span></a></h3><p>If you need to negate only when a flag is false, then use the following to avoid branching:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">bool fDontNegate<span class="token punctuation">;</span>  <span class="token comment">// Flag indicating we should not negate v.</span></span>
<span class="line"><span class="token keyword">int</span> v<span class="token punctuation">;</span>             <span class="token comment">// Input value to negate if fDontNegate is false.</span></span>
<span class="line"><span class="token keyword">int</span> r<span class="token punctuation">;</span>             <span class="token comment">// result = fDontNegate ? v : -v;</span></span>
<span class="line"></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>fDontNegate <span class="token operator">^</span> <span class="token punctuation">(</span>fDontNegate <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> v<span class="token punctuation">;</span></span>
<span class="line">If you need to negate only when a flag is true<span class="token punctuation">,</span> then use this<span class="token operator">:</span></span>
<span class="line">bool fNegate<span class="token punctuation">;</span>  <span class="token comment">// Flag indicating if we should negate v.</span></span>
<span class="line"><span class="token keyword">int</span> v<span class="token punctuation">;</span>         <span class="token comment">// Input value to negate if fNegate is true.</span></span>
<span class="line"><span class="token keyword">int</span> r<span class="token punctuation">;</span>         <span class="token comment">// result = fNegate ? -v : v;</span></span>
<span class="line"></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">^</span> <span class="token operator">-</span>fNegate<span class="token punctuation">)</span> <span class="token operator">+</span> fNegate<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Avraham Plotnitzky suggested I add the first version on June 2, 2009. Motivated to avoid the multiply, I came up with the second version on June 8, 2009. Alfonso De Gregorio pointed out that some parens were missing on November 26, 2009, and received a bug bounty.</p><h3 id="merge-bits-from-two-values-according-to-a-mask" tabindex="-1"><a class="header-anchor" href="#merge-bits-from-two-values-according-to-a-mask"><span>Merge bits from two values according to a mask</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token comment">// value to merge in non-masked bits</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token comment">// value to merge in masked bits</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> mask<span class="token punctuation">;</span> <span class="token comment">// 1 where bits from b should be selected; 0 where from a.</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> r<span class="token punctuation">;</span>    <span class="token comment">// result of (a &amp; ~mask) | (b &amp; mask) goes here</span></span>
<span class="line"></span>
<span class="line">r <span class="token operator">=</span> a <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This shaves one operation from the obvious way of combining two sets of bits according to a bit mask. If the mask is a constant, then there may be no advantage.</p><p>Ron Jeffery sent this to me on February 9, 2006.</p><h3 id="counting-bits-set-naive-way" tabindex="-1"><a class="header-anchor" href="#counting-bits-set-naive-way"><span>Counting bits set (naive way)</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// count the number of bits set in v</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// c accumulates the total bits set in v</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v<span class="token punctuation">;</span> v <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  c <span class="token operator">+=</span> v <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The naive approach requires one iteration per bit, until no more bits are set. So on a 32-bit word with only the high set, it will go through 32 iterations.</p><h3 id="counting-bits-set-by-lookup-table" tabindex="-1"><a class="header-anchor" href="#counting-bits-set-by-lookup-table"><span>Counting bits set by lookup table</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> BitsSetTable256<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">B2</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> n<span class="token punctuation">,</span>     n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>     n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>     n<span class="token operator">+</span><span class="token number">2</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">B4</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">B2</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B2</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B2</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B2</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span></span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">B6</span><span class="token expression"><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token function">B4</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B4</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B4</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B4</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span></span></span></span>
<span class="line">    <span class="token function">B6</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B6</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B6</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B6</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// count the number of bits set in 32-bit value v</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// c is the total bits set in v</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Option 1:</span></span>
<span class="line">c <span class="token operator">=</span> BitsSetTable256<span class="token punctuation">[</span>v <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span> <span class="token operator">+</span> </span>
<span class="line">    BitsSetTable256<span class="token punctuation">[</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span> <span class="token operator">+</span> </span>
<span class="line">    BitsSetTable256<span class="token punctuation">[</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">]</span> <span class="token operator">+</span> </span>
<span class="line">    BitsSetTable256<span class="token punctuation">[</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// Option 2:</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>v<span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">=</span> BitsSetTable256<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> </span>
<span class="line">    BitsSetTable256<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> </span>
<span class="line">    BitsSetTable256<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span>	</span>
<span class="line">    BitsSetTable256<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// To initially generate the table algorithmically:</span></span>
<span class="line">BitsSetTable256<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  BitsSetTable256<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> BitsSetTable256<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On July 14, 2009 Hallvard Furuseth suggested the macro compacted table.</p><h3 id="counting-bits-set-brian-kernighan-s-way" tabindex="-1"><a class="header-anchor" href="#counting-bits-set-brian-kernighan-s-way"><span>Counting bits set, Brian Kernighan&#39;s way</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// count the number of bits set in v</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// c accumulates the total bits set in v</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> v<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  v <span class="token operator">&amp;=</span> v <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// clear the least significant bit set</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Brian Kernighan&#39;s method goes through as many iterations as there are set bits. So if we have a 32-bit word with only the high bit set, then it will only go once through the loop.</p><p>Published in 1988, the C Programming Language 2nd Ed. (by Brian W. Kernighan and Dennis M. Ritchie) mentions this in exercise 2-9. On April 19, 2006 Don Knuth pointed out to me that this method &quot;was first published by Peter Wegner in CACM 3 (1960), 322. (Also discovered independently by Derrick Lehmer and published in 1964 in a book edited by Beckenbach.)&quot;</p><p>Counting bits set in 14, 24, or 32-bit words using 64-bit instructions</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// count the number of bits set in v</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// c accumulates the total bits set in v</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// option 1, for at most 14-bit values in v:</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">0x200040008001ULL</span> <span class="token operator">&amp;</span> <span class="token number">0x111111111111111ULL</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0xf</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// option 2, for at most 24-bit values in v:</span></span>
<span class="line">c <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1001001001001ULL</span> <span class="token operator">&amp;</span> <span class="token number">0x84210842108421ULL</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1f</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token number">0xfff000</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1001001001001ULL</span> <span class="token operator">&amp;</span> <span class="token number">0x84210842108421ULL</span><span class="token punctuation">)</span> </span>
<span class="line">     <span class="token operator">%</span> <span class="token number">0x1f</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// option 3, for at most 32-bit values in v:</span></span>
<span class="line">c <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1001001001001ULL</span> <span class="token operator">&amp;</span> <span class="token number">0x84210842108421ULL</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1f</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token number">0xfff000</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1001001001001ULL</span> <span class="token operator">&amp;</span> <span class="token number">0x84210842108421ULL</span><span class="token punctuation">)</span> <span class="token operator">%</span> </span>
<span class="line">     <span class="token number">0x1f</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1001001001001ULL</span> <span class="token operator">&amp;</span> <span class="token number">0x84210842108421ULL</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">0x1f</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method requires a 64-bit CPU with fast modulus division to be efficient. The first option takes only 3 operations; the second option takes 10; and the third option takes 15.</p><p>Rich Schroeppel originally created a 9-bit version, similiar to option 1; see the Programming Hacks section of <a href="http://www.inwap.com/pdp10/hbaker/hakmem/hakmem.html" target="_blank" rel="noopener noreferrer">Beeler, M., Gosper, R. W., and Schroeppel, R. HAKMEM. MIT AI Memo 239, Feb. 29, 1972</a>. His method was the inspiration for the variants above, devised by Sean Anderson. Randal E. Bryant offered a couple bug fixes on May 3, 2005. Bruce Dawson tweaked what had been a 12-bit version and made it suitable for 14 bits using the same number of operations on Feburary 1, 2007.</p><h3 id="counting-bits-set-in-parallel" tabindex="-1"><a class="header-anchor" href="#counting-bits-set-in-parallel"><span>Counting bits set, in parallel</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> v<span class="token punctuation">;</span> <span class="token comment">// count bits set in this (32-bit value)</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> c<span class="token punctuation">;</span> <span class="token comment">// store the total here</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> S<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Magic Binary Numbers</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x55555555</span><span class="token punctuation">,</span> <span class="token number">0x33333333</span><span class="token punctuation">,</span> <span class="token number">0x0F0F0F0F</span><span class="token punctuation">,</span> <span class="token number">0x00FF00FF</span><span class="token punctuation">,</span> <span class="token number">0x0000FFFF</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">c <span class="token operator">=</span> v <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> S<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> S<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> S<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> S<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> B<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The B array, expressed as binary, is:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">B<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x55555555</span> <span class="token operator">=</span> <span class="token number">01010101</span> <span class="token number">01010101</span> <span class="token number">01010101</span> <span class="token number">01010101</span></span>
<span class="line">B<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x33333333</span> <span class="token operator">=</span> <span class="token number">00110011</span> <span class="token number">00110011</span> <span class="token number">00110011</span> <span class="token number">00110011</span></span>
<span class="line">B<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0F0F0F0F</span> <span class="token operator">=</span> <span class="token number">00001111</span> <span class="token number">00001111</span> <span class="token number">00001111</span> <span class="token number">00001111</span></span>
<span class="line">B<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x00FF00FF</span> <span class="token operator">=</span> <span class="token number">00000000</span> <span class="token number">11111111</span> <span class="token number">00000000</span> <span class="token number">11111111</span></span>
<span class="line">B<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x0000FFFF</span> <span class="token operator">=</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">11111111</span> <span class="token number">11111111</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can adjust the method for larger integer sizes by continuing with the patterns for the Binary Magic Numbers, B and S. If there are k bits, then we need the arrays S and B to be <code>ceil(lg(k))</code> elements long, and we must compute the same number of expressions for c as S or B are long. For a 32-bit v, 16 operations are used.</p><p>The best method for counting bits in a 32-bit integer v is the following:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">v <span class="token operator">=</span> v <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// reuse input as temporary</span></span>
<span class="line">v <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token number">0x33333333</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x33333333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// temp</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF0F0F0F</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x1010101</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">;</span> <span class="token comment">// count</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The best bit counting method takes only 12 operations, which is the same as the lookup-table method, but avoids the memory and potential cache misses of a table. It is a hybrid between the purely parallel method above and the earlier methods using multiplies (in the section on counting bits with 64-bit instructions), though it doesn&#39;t use 64-bit instructions. The counts of bits set in the bytes is done in parallel, and the sum total of the bits set in the bytes is computed by multiplying by 0x1010101 and shifting right 24 bits.</p><p>A generalization of the best bit counting method to integers of bit-widths upto 128 (parameterized by type <code>T</code>) is this:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line">v <span class="token operator">=</span> v <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment">// temp</span></span>
<span class="line">v <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&amp;</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">15</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">15</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// temp</span></span>
<span class="line">v <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">+</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">255</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">;</span>                      <span class="token comment">// temp</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token operator">~</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT<span class="token punctuation">;</span> <span class="token comment">// count</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>See <a href="http://groups.google.com/groups?q=reverse+bits&amp;num=100&amp;hl=en&amp;group=comp.graphics.algorithms&amp;imgsafe=off&amp;safe=off&amp;rnum=2&amp;ic=1&amp;selm=4fulhm%248dn%40atlas.uniserve.com" target="_blank" rel="noopener noreferrer">Ian Ashdown&#39;s nice newsgroup post</a> for more information on counting the number of bits set (also known as <em>sideways addition</em>). The best bit counting method was brought to my attention on October 5, 2005 by <a href="http://onezero.org/" target="_blank" rel="noopener noreferrer">Andrew Shapira</a>; he found it in pages 187-188 of <a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25112.PDF" target="_blank" rel="noopener noreferrer">Software Optimization Guide for AMD Athlon™ 64 and Opteron™ Processors</a>. Charlie Gordon suggested a way to shave off one operation from the purely parallel version on December 14, 2005, and Don Clugston trimmed three more from it on December 30, 2005. I made a typo with Don&#39;s suggestion that Eric Cole spotted on January 8, 2006. Eric later suggested the arbitrary bit-width generalization to the best method on November 17, 2006. On April 5, 2007, Al Williams observed that I had a line of dead code at the top of the first method.</p><h3 id="count-bits-set-rank-from-the-most-significant-bit-upto-a-given-position" tabindex="-1"><a class="header-anchor" href="#count-bits-set-rank-from-the-most-significant-bit-upto-a-given-position"><span>Count bits set (rank) from the most-significant bit upto a given position</span></a></h3><p>The following finds the the rank of a bit, meaning it returns the sum of bits that are set to 1 from the most-signficant bit downto the bit at the given position.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">uint64_t</span> v<span class="token punctuation">;</span>       <span class="token comment">// Compute the rank (bits set) in v from the MSB to pos.</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> pos<span class="token punctuation">;</span> <span class="token comment">// Bit position to count bits upto.</span></span>
<span class="line"><span class="token keyword">uint64_t</span> r<span class="token punctuation">;</span>       <span class="token comment">// Resulting rank of bit at pos goes here.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Shift out bits after given position.</span></span>
<span class="line">r <span class="token operator">=</span> v <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT <span class="token operator">-</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Count set bits in parallel.</span></span>
<span class="line"><span class="token comment">// r = (r &amp; 0x5555...) + ((r &gt;&gt; 1) &amp; 0x5555...);</span></span>
<span class="line">r <span class="token operator">=</span> r <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// r = (r &amp; 0x3333...) + ((r &gt;&gt; 2) &amp; 0x3333...);</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// r = (r &amp; 0x0f0f...) + ((r &gt;&gt; 4) &amp; 0x0f0f...);</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">17</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// r = r % 255;</span></span>
<span class="line">r <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> CHAR_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Juha Järvi sent this to me on November 21, 2009 as an inverse operation to the computing the bit position with the given rank, which follows.</p><h3 id="select-the-bit-position-from-the-most-significant-bit-with-the-given-count-rank" tabindex="-1"><a class="header-anchor" href="#select-the-bit-position-from-the-most-significant-bit-with-the-given-count-rank"><span>Select the bit position (from the most-significant bit) with the given count (rank)</span></a></h3><p>The following 64-bit code selects the position of the rth 1 bit when counting from the left. In other words if we start at the most significant bit and proceed to the right, counting the number of bits set to 1 until we reach the desired rank, <code>r</code>, then the position where we stop is returned. If the rank requested exceeds the count of bits set, then 64 is returned. The code may be modified for 32-bit or counting from the right.</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token class-name">uint64_t</span> v<span class="token punctuation">;</span>          <span class="token comment">// Input value to find position with rank r.</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> r<span class="token punctuation">;</span>      <span class="token comment">// Input: bit&#39;s desired rank [1-64].</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> s<span class="token punctuation">;</span>      <span class="token comment">// Output: Resulting position of bit with rank r [1-64]</span></span>
<span class="line"><span class="token class-name">uint64_t</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">// Intermediate temporaries for bit count.</span></span>
<span class="line"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> t<span class="token punctuation">;</span>      <span class="token comment">// Bit count temporary.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Do a normal parallel bit count for a 64-bit integer,                     </span></span>
<span class="line"><span class="token comment">// but store all intermediate steps.                                        </span></span>
<span class="line"><span class="token comment">// a = (v &amp; 0x5555...) + ((v &gt;&gt; 1) &amp; 0x5555...);</span></span>
<span class="line">a <span class="token operator">=</span>  v <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// b = (a &amp; 0x3333...) + ((a &gt;&gt; 2) &amp; 0x3333...);</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// c = (b &amp; 0x0f0f...) + ((b &gt;&gt; 4) &amp; 0x0f0f...);</span></span>
<span class="line">c <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">0x11</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// d = (c &amp; 0x00ff...) + ((c &gt;&gt; 8) &amp; 0x00ff...);</span></span>
<span class="line">d <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">0UL</span><span class="token operator">/</span><span class="token number">0x101</span><span class="token punctuation">;</span></span>
<span class="line">t <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;&gt;</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// Now do branchless select!                                                </span></span>
<span class="line">s  <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// if (r &gt; t) {s -= 32; r -= t;}</span></span>
<span class="line">s <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">;</span> r <span class="token operator">-=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">t  <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// if (r &gt; t) {s -= 16; r -= t;}</span></span>
<span class="line">s <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span> r <span class="token operator">-=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">t  <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// if (r &gt; t) {s -= 8; r -= t;}</span></span>
<span class="line">s <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">5</span><span class="token punctuation">;</span> r <span class="token operator">-=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">t  <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// if (r &gt; t) {s -= 4; r -= t;}</span></span>
<span class="line">s <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">;</span> r <span class="token operator">-=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">t  <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// if (r &gt; t) {s -= 2; r -= t;}</span></span>
<span class="line">s <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">7</span><span class="token punctuation">;</span> r <span class="token operator">-=</span> <span class="token punctuation">(</span>t <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">t  <span class="token operator">=</span> <span class="token punctuation">(</span>v <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>s <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// if (r &gt; t) s--;</span></span>
<span class="line">s <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line">s <span class="token operator">=</span> <span class="token number">65</span> <span class="token operator">-</span> s<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If branching is fast on your target CPU, consider uncommenting the if-statements and commenting the lines that follow them.</p><p>Juha Järvi sent this to me on November 21, 2009.</p>`,99))]),n[9]||(n[9]=s("hr",null,null,-1)),t(r),n[10]||(n[10]=p('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Since <code>a[k]</code> becomes <code>*(a+k)</code>, and since addition is commutative, many C compilers also happily accept <code>k[a]</code>. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',2))])}const X=u(b,[["render",f]]),A=JSON.parse('{"path":"/academics/COEN020/read01d.html","title":"Read 01d","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Read 01d","description":"COEN020 > Read 01d","category":["SCU","COEN020","Computer Engineering"],"tag":["coen","coen020","scu","cpp","c"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Read 01d\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/academics/COEN020/read01d.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Read 01d"}],["meta",{"property":"og:description","content":"COEN020 > Read 01d"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"scu"}],["meta",{"property":"article:tag","content":"coen020"}],["meta",{"property":"article:tag","content":"coen"}]]},"git":{},"readingTime":{"minutes":29.7,"words":8911},"filePathRelative":"academics/COEN020/read01d.md"}');export{X as comp,A as data};
