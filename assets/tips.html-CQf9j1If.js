import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,d as s,at as o,b as a,t as d,w as t,r as l,o as m,e as p}from"./app-DM0WOK1z.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},f={class:"hint-container details"};function h(c,n){const e=l("router-link"),i=l("Mermaid"),u=l("TagLinks");return m(),k("div",null,[s("h1",b,[s("a",g,[s("span",null,d(c.$frontmatter.title)+" 관련",1)])]),s("nav",w,[s("ul",null,[s("li",null,[a(e,{to:"#xcode"},{default:t(()=>n[0]||(n[0]=[p("XCode")])),_:1})]),s("li",null,[a(e,{to:"#foundation-improvements"},{default:t(()=>n[1]||(n[1]=[p("Foundation Improvements")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#attributed-strings"},{default:t(()=>n[2]||(n[2]=[p("Attributed Strings")])),_:1})]),s("li",null,[a(e,{to:"#makrdown-support"},{default:t(()=>n[3]||(n[3]=[p("makrdown support")])),_:1})]),s("li",null,[a(e,{to:"#date-formatter"},{default:t(()=>n[4]||(n[4]=[p("date formatter")])),_:1})])])]),s("li",null,[a(e,{to:"#mvvm-architecture-pattern-in-swift"},{default:t(()=>n[5]||(n[5]=[p("MVVM Architecture Pattern in Swift")])),_:1})]),s("li",null,[a(e,{to:"#how-to-use-realm-database-in-swift"},{default:t(()=>n[6]||(n[6]=[p("How to Use Realm Database in Swift")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#what-is-realm"},{default:t(()=>n[7]||(n[7]=[p("What is Realm?")])),_:1})]),s("li",null,[a(e,{to:"#_1-configure-realm"},{default:t(()=>n[8]||(n[8]=[p("1. Configure Realm")])),_:1})]),s("li",null,[a(e,{to:"#_2-create-object-models"},{default:t(()=>n[9]||(n[9]=[p("2. Create Object Models")])),_:1})]),s("li",null,[a(e,{to:"#_3-perform-operations"},{default:t(()=>n[10]||(n[10]=[p("3. Perform Operations")])),_:1})])])]),s("li",null,[a(e,{to:"#unit-testing"},{default:t(()=>n[11]||(n[11]=[p("Unit Testing")])),_:1})]),s("li",null,[a(e,{to:"#extension-s"},{default:t(()=>n[12]||(n[12]=[p("Extension(s)")])),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#string"},{default:t(()=>n[13]||(n[13]=[p("String")])),_:1})])])])])]),n[16]||(n[16]=o(`<hr><h2 id="xcode" tabindex="-1"><a class="header-anchor" href="#xcode"><span>XCode</span></a></h2><hr><h2 id="foundation-improvements" tabindex="-1"><a class="header-anchor" href="#foundation-improvements"><span>Foundation Improvements</span></a></h2><h3 id="attributed-strings" tabindex="-1"><a class="header-anchor" href="#attributed-strings"><span>Attributed Strings</span></a></h3><ul><li>New <strong>string type</strong>: has character counting like strings</li><li>Are <strong>localisable</strong>: also allowing for <strong>interpolation</strong></li><li>Has <strong>markdown support</strong></li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">// Attributed String</span></span>
<span class="line"><span class="token keyword">var</span> exampleString <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">exampleString<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">italicSystemFont</span><span class="token punctuation">(</span>ofSize<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Attributed Container</span></span>
<span class="line"><span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token class-name">AttributedContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">container<span class="token punctuation">.</span>foregroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>systemRed</span>
<span class="line">container<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>gray</span>
<span class="line">container<span class="token punctuation">.</span>kern <span class="token operator">=</span> <span class="token number">2.0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;@vikingskullapps&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">userName<span class="token punctuation">.</span><span class="token function">mergeAttributes</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="makrdown-support" tabindex="-1"><a class="header-anchor" href="#makrdown-support"><span>makrdown support</span></a></h3><ul><li>Attributed strings can now be created with <strong>markdown</strong></li><li>SwiftUI <strong>Text views support</strong> makrdown syntax</li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">let</span> markdownExample <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">AttributedString</span><span class="token punctuation">(</span>markdown<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;**Hello** _world_!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Text</span></span>
<span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;**VikingSkullApps** - [instagram](https://instagram.com/vikingskullapps)&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-formatter" tabindex="-1"><a class="header-anchor" href="#date-formatter"><span>date formatter</span></a></h3><ul><li>New API: improved <strong>usability</strong> and <strong>performance</strong> with a <strong>declarative approach</strong></li><li>No need to <strong>cache date formatters</strong></li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">let</span> currentDate <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> date <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dateTime<span class="token punctuation">.</span><span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// Oct 25, 2021</span></span>
<span class="line"><span class="token keyword">let</span> dayYear <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dateTime<span class="token punctuation">.</span><span class="token function">day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2021 (day:25)</span></span>
<span class="line"><span class="token keyword">let</span> onlyDate <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>numeric<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>omitted<span class="token punctuation">)</span> <span class="token comment">// 10/25/2021</span></span>
<span class="line"><span class="token keyword">let</span> dateLong <span class="token operator">=</span> currentDate<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>long<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>complete<span class="token punctuation">)</span> <span class="token comment">// October 25, 2021, 11:56:25 PM GMT+1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="mvvm-architecture-pattern-in-swift" tabindex="-1"><a class="header-anchor" href="#mvvm-architecture-pattern-in-swift"><span>MVVM Architecture Pattern in Swift</span></a></h2>`,15)),s("details",f,[n[14]||(n[14]=o('<summary>MVVM Architecture Pattern in Swift</summary><h3 id="what-is-mvvm" tabindex="-1"><a class="header-anchor" href="#what-is-mvvm"><span>What is MVVM</span></a></h3><p>MVVM stands for <strong>Model-View-ViewModel</strong>. It&#39;s an architecture pattern form structuring and building apps.</p><p>MVVM decouples the UI code from the business logic by introducing a mediator called <strong>ViewModel</strong>.</p><p>MVVM is great way to lim down the somewhat huge <strong>ViewControllers</strong> that requires several model-to-view transformations.</p><p>It also make <strong>testability</strong> easy. since the ViewModel contains all the logic &amp; knows nothing about the view.</p><p>Let&#39;s go over the MVVM diagram to get a better understanding of how it all works</p><h3 id="mvvm-diagram" tabindex="-1"><a class="header-anchor" href="#mvvm-diagram"><span>MVVM Diagram</span></a></h3>',8)),a(i,{code:"eJxNTM0KgkAQvu9TDILdtgeoCLIukRUEdpHATccc2FZxBzyo7966RjSH4fuXUgom1riC5HgihqMpsEH3DIvJDMOeDPEK+qDUdZdXquVgYhW/dayeqK2jpdIWxxHGMBS/GMS3tQB3u/RO2D08jjyW57pAPSv79I/spNwO187YIZrjMAlBNkmwgKQpFGMWDPs5vVl696BYQUSmIPMC7yz8Tyy2oHKm2lhX+k760qVmKgmtWxLiA6fUTE0="}),n[15]||(n[15]=o(`<p>Let&#39;s deep dive and understand the functionalities of each of the components with a demo</p><h3 id="_1-model" tabindex="-1"><a class="header-anchor" href="#_1-model"><span>1. Model</span></a></h3><p>Model defines core types &amp; implements app business logic. It is independent of View and View-Model.</p><p>It contains the application data. Its purpose is to fetch the data from an API/database and provide it to the View-Model.</p><p>It also provides for CRUD operations that can be invoked by the View-Model on user interactions.</p><p>Usually, there&#39;s only one model exposed and used by the View-Models.The rest of the models interact with each other.</p><p>For example, let&#39;s create a model that the View-Models will interact with. Name it as <code>DataManager</code>.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">DataManager</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// MARK:- variables</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> shared<span class="token punctuation">:</span> <span class="token class-name">DataManager</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">DataManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> networkManager<span class="token punctuation">:</span> <span class="token class-name">NetworkManager</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- inistializers</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>networkManager<span class="token punctuation">:</span> <span class="token class-name">NetworkManager</span> <span class="token operator">=</span> <span class="token class-name">NetworkManagers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>networkManager <span class="token operator">=</span> networkManager</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- functions</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">getPosts</span><span class="token punctuation">(</span>page<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> onCompletion<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Post</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> queries<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;page&quot;</span></span><span class="token punctuation">:</span> page<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;limit&quot;</span></span><span class="token punctuation">:</span> limit<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>networkManager<span class="token punctuation">.</span><span class="token function">getPosts</span><span class="token punctuation">(</span>queries<span class="token punctuation">:</span> queries<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>res<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span> </span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">onCompletion</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>DataManager</code> uses the <code>NetworkingManager</code> model internally.</li><li>The <code>getPosts()</code> function takes in an offset, and a limit. It prepares the query and passes it to the <code>networkManager</code>. On success, it passes the data to the View-Model.</li></ul><h3 id="_2-view-model" tabindex="-1"><a class="header-anchor" href="#_2-view-model"><span>2. View-Model</span></a></h3><p>Logic resides in the View-Models. They own the <strong>Models</strong> and provides the data to the <strong>View</strong>. It is <code>UiKit</code> independent representation of your <strong>View</strong> and its state.</p><p><strong>View-Model</strong> s have variables whose values are updated when the <strong>Model</strong> returns the value.</p><p>Depending on your use case, you can choose to make your <strong>View-Model</strong> as <code>struct</code> or a <code>class</code>.</p><p>There are many ways to notify the View. I prefer using Bindings, for that we&#39;ll need to create a small class called <code>Box</code>.</p><blockquote><p>I&#39;ll cover the View-Model here. You can find the <code>Box</code> class in the project.</p></blockquote><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">PostListViewModel</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// MARK:- variables</span></span>
<span class="line">    <span class="token keyword">let</span> dataManager<span class="token punctuation">:</span> <span class="token class-name">DataManager</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> posts<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token class-name">Post</span><span class="token punctuation">]</span><span class="token operator">?&gt;</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">[</span><span class="token nil constant">nil</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> offset<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> limit<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- initializer</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>dataManager<span class="token punctuation">:</span> <span class="token class-name">DataManager</span> <span class="token operator">=</span> <span class="token class-name">DataManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>dataManager <span class="token operator">=</span> dataManager</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- functions</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>dataManager<span class="token punctuation">.</span><span class="token function">getPosts</span><span class="token punctuation">(</span>offset<span class="token punctuation">:</span> offset<span class="token punctuation">.</span>value<span class="token punctuation">,</span> limit<span class="token punctuation">:</span> limit<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>posts<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span> </span>
<span class="line">            <span class="token keyword">guard</span> <span class="token keyword">let</span> posts <span class="token operator">=</span> posts <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>posts<span class="token punctuation">.</span>value <span class="token operator">=</span> posts</span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>offset<span class="token punctuation">.</span>value <span class="token operator">=</span> posts<span class="token punctuation">.</span>count</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Let&#39;s create a View-Model named <code>PostListViewModel</code> that uses the <code>DataManager</code>.</li><li>On initialization it calls the <code>getPosts()</code> function.</li></ul><p>If the results are returned by the function, the <code>posts</code> and the <code>offset</code> variables are updated</p><h3 id="_3-view" tabindex="-1"><a class="header-anchor" href="#_3-view"><span>3. View</span></a></h3><p>MVVM treats the ViewContrller as a view.</p><p>View defines the layout, appearance of the UI. It informs the View-Model about the user interactions.</p><p><strong>View</strong> owns an instance of the View-Model.</p><p>The <strong>View</strong> gets notified whenever there is a change in the data/state by the View-Model <strong>bindings</strong>.</p><p>For user actions, the <strong>View</strong> invokes the functions provided by the View-Model.</p><p>Let&#39;s add a <code>tableView</code> to our ViewController, and use the View-Model for the data.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">UIKit</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">HomeViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// MARK:- outlets</span></span>
<span class="line">    <span class="token attribute atrule">@IBOutlet</span> <span class="token keyword">weak</span> <span class="token keyword">var</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- variables</span></span>
<span class="line">    <span class="token keyword">var</span> postListViewModwl<span class="token punctuation">:</span> <span class="token class-name">PostListViewModel</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- lifecycle</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>postListViewModel <span class="token operator">=</span> <span class="token class-name">PostListViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>postListViewModel<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>bind <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token short-argument">$0</span> <span class="token operator">!=</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">self</span><span class="token punctuation">.</span>tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">HomeViewController</span><span class="token punctuation">:</span> <span class="token class-name">UITableViewDataSource</span><span class="token punctuation">,</span> <span class="token class-name">UITableViewDelegate</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> numberOfRowsInSection section<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> posts <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>postListViewModel<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>value <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> posts<span class="token punctuation">.</span>count</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> posts <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>postListViewModel<span class="token punctuation">.</span>posts<span class="token punctuation">.</span>value <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token class-name">UITableViewCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">let</span> cell <span class="token operator">=</span> <span class="token class-name">UITableViewCell</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> posts<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>title</span>
<span class="line">        <span class="token keyword">return</span> cell</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>The <strong>View-Model</strong> is initialized by the ViewController</li><li>The ViewController listens to the <code>posts</code> variable of the View-Model by binding</li><li>When the <code>posts</code> variable is set by the View-Model, the binding closure is called and the <code>tableView</code> gets reloaded.</li><li>The TableView obtains the values from the View-Model and displays them</li></ul>`,27))]),n[17]||(n[17]=o(`<hr><h2 id="how-to-use-realm-database-in-swift" tabindex="-1"><a class="header-anchor" href="#how-to-use-realm-database-in-swift"><span>How to Use Realm Database in Swift</span></a></h2><h3 id="what-is-realm" tabindex="-1"><a class="header-anchor" href="#what-is-realm"><span>What is Realm?</span></a></h3><p>Realm is an open-source, cross-platform mobile database solution that you can integrate directly in your iOS projects.</p><p>Realm provides a developer-friendly alternative to <strong>CoreData</strong> and <strong>SQLite</strong> for storing and fetching data.</p><p>In <strong>Realm</strong>, the data gets directly exposed as objects, and they are queryable by code. It is quite intuitive and easy to pick up.</p><p>Realm removes the need for ORM that causes performance and maintenance issues. It is faster than even raw <strong>SQLite</strong> operations.</p><p>Let us take a look at the steps for Integrating Realm and using them into an iOS project.</p><h3 id="_1-configure-realm" tabindex="-1"><a class="header-anchor" href="#_1-configure-realm"><span>1. Configure Realm</span></a></h3><p>First and foremost, you need to add realm to your project. You can use either <strong>CocoaPods</strong>, <strong>Carthage</strong>, or <strong>Swift Package Manager</strong> to do that.</p><blockquote><p>Note: SPM require min. target to be iOS 11</p></blockquote><p>Let us go over the basics of Realm</p><ol><li><strong>Realm Instance</strong>: A Realm instance represents a Realm database. They can either be stored on disk or in memory.</li><li><strong>Realm Configuration</strong>: A Configuration instance describes the different options used to create an instance of a Realm. They are plain structs.</li><li><strong>Object</strong>: An Object is a class that defines Realm Model entities. In Realm, you define your Model classes by subclassing the Object class and adding the required properties to be stored to it.</li></ol><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name">RealmSwift</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">RealmManager</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//MARK:- functions</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token keyword">func</span> <span class="token function-definition function">realmConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Realm</span><span class="token punctuation">.</span><span class="token class-name">Configuration</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Realm</span><span class="token punctuation">.</span><span class="token class-name">Configuration</span><span class="token punctuation">(</span>schemaVersion<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> migrationBack<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>migration<span class="token punctuation">,</span> oldSchemaVersion<span class="token punctuation">)</span> <span class="token keyword">in</span></span>
<span class="line">            <span class="token comment">// Migration block. Useful when you upgrade the schema version</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token keyword">func</span> <span class="token function-definition function">realmInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Realm</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> newRealm <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">Realm</span><span class="token punctuation">(</span>configuration<span class="token punctuation">:</span> <span class="token function">realmConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> newReam</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unable to create an instance of Realm&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>We start by creating a service class for handling everything related to Realm. Let&#39;s call it <code>RealmManager</code>.</li><li><code>RealmConfiguration</code> has a <code>schemaVersion</code> and a closure. When you update your <code>schemaVersion</code>, you can use this block to migrate data.</li><li><code>realmInstance()</code> takes the declared configuration and provides an instance. We use this instance to perform operations on Realm.</li></ul><p>Now, we need to write functions for performing the CRUD operations in Realm. Let&#39;s create a protocol and add the required functions to it.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">private</span> <span class="token keyword">protocol</span> <span class="token class-name">RealmOperations</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// write operation</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">write</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> object<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">,</span> block<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Realm</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// adds a single object to Realm</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> object<span class="token punctuation">:</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// adds a list of objects to Realm</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> objects<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token class-name">Iterator</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Object</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// gets objects from Realm that satisfy the given predicate</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">get</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token punctuation">:</span> <span class="token class-name">Object</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>fromEntity entity<span class="token punctuation">:</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token keyword">Type</span><span class="token punctuation">,</span> </span>
<span class="line">                                withPredicate predicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span><span class="token operator">?</span><span class="token punctuation">,</span> </span>
<span class="line">                                sortedByKey sortKey<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">,</span> </span>
<span class="line">                                inAscending isAscending<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Results</span><span class="token operator">&lt;</span><span class="token class-name">R</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// deletes a single object from Realm static func delete( object: Object)</span></span>
<span class="line">    <span class="token comment">// deletes a list of object from Realm</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">delete</span><span class="token operator">&lt;</span><span class="token class-name">S</span><span class="token punctuation">:</span> <span class="token class-name">Sequence</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> objects<span class="token punctuation">:</span> <span class="token class-name">S</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">S</span><span class="token punctuation">.</span><span class="token class-name">Iterator</span><span class="token punctuation">.</span><span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Object</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// deletes an Entity from Realm based on the given predicate</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">delete</span><span class="token punctuation">(</span>fromEntity entity<span class="token punctuation">:</span> <span class="token class-name">Object</span><span class="token punctuation">.</span> <span class="token keyword">Type</span><span class="token punctuation">,</span> withPredicate predicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span><span class="token operator">?</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// updates and overwrites a Realm object</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Object</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>_object<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> block<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <strong>write</strong> function writes data to Realm, and is used by the <strong>add</strong>, <strong>delete</strong> and <strong>update</strong> functions.</p><blockquote><p>PS: I&#39;m leaving the implementation of the functions in this post( You can pick it up from my GitHub project, they are to be used as is).</p></blockquote><h3 id="_2-create-object-models" tabindex="-1"><a class="header-anchor" href="#_2-create-object-models"><span>2. Create Object Models</span></a></h3><p>The next step involves creating <strong>Models</strong> that conform to <strong>Object</strong> class. Each Model <strong>Type</strong> is stored as a separate entity inside Realm.</p><p>Realm supports the following properties.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token class-name">Bool</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token boolean">false</span> </span>
<span class="line"><span class="token class-name">Int</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token class-name">Float</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">Float</span> <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"><span class="token class-name">Double</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0.0</span> </span>
<span class="line"><span class="token class-name">String</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span> </span>
<span class="line"><span class="token class-name">Data</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token class-name">Date</span> <span class="token operator">-</span> <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Points to keep in mind when creating a <strong>Realm Model</strong></p><ol><li>They must be declared as a class and inherit the Object class.</li><li>The properties/variables have to be prefixed with @<code>objc dynamic var</code>.</li><li>You need to override the <code>primaryKey()</code> function and set a primary key.</li><li>You need to override the <code>ignoredProperties()</code> function for computed vars.</li></ol><p>Let me show you how you can <strong>store</strong> an array of Objects received from a <code>GET</code> Request. To do this, we&#39;ll also need to conform to the Decodable protocol.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">/// JSON structure</span></span>
<span class="line"><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">}</span>
<span class="line">  &quot;id&quot;: 1,</span>
<span class="line">  &quot;num&quot;: &quot;001&quot;,</span>
<span class="line">  &quot;name&quot;: &quot;Bulbasaur&quot;,</span>
<span class="line">  &quot;ing&quot;: &quot;http://www.serebii.net/pokemongo/pokemon/001.png&quot;,</span>
<span class="line">  &quot;height&quot;: 0.71&quot;,</span>
<span class="line">  &quot;weight&quot;: &quot;6.9 kg&quot;,</span>
<span class="line">}</span>
<span class="line">&quot;&quot;&quot;</span></span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> utf8<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>JSON structure, that we store.</p></blockquote><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Pokemon</span><span class="token punctuation">:</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Decodable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">8</span> </span>
<span class="line">    <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> pokemonNumber<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span> </span>
<span class="line">    <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> imageURL<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> height<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span> </span>
<span class="line">    <span class="token attribute atrule">@objc</span> <span class="token keyword">dynamic</span> <span class="token keyword">var</span> weight<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">enum</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Codingkey</span> <span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token keyword">case</span> id <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;id&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> pokemonNumber <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;num&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> imageURL <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;img&quot;</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">case</span> height <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;height&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> weight <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;weight&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// MARK:- initializers</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">required</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Primary Key is declared here. REQUIRED</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">primaryKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;id&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// properties that are either computed and lazy are mentioned here</span></span>
<span class="line">    <span class="token comment">// since Realm cannot store them.</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function-definition function">ignoredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">[</span><span class="token operator">**</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>you can see the created Model. It is a class, and it implements the <code>Decodable</code> protocol as well as <code>Realm</code> Object.</p><h3 id="_3-perform-operations" tabindex="-1"><a class="header-anchor" href="#_3-perform-operations"><span>3. Perform Operations</span></a></h3><p>Now that we have created the model, we call the API and store its response to Realm. We use the <strong>ADD</strong> function of Realm Manager.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">let</span> urlstring <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://raw.githubusercontent.com/Biuni/PokemonGO-Pokedex/master/pokedex.json&quot;</span></span> </span>
<span class="line"><span class="token keyword">let</span> task <span class="token operator">=</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">dataTask</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span> </span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> data data <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> pokemonResponse <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">PokemonResponse</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Pokemon count&quot;</span></span><span class="token punctuation">,</span> pokemonResponse<span class="token punctuation">.</span>pokemon<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// ADD &amp; STORE the data to Realm</span></span>
<span class="line">            <span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pokemonResponse<span class="token punctuation">.</span>pokemon<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">task<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now perform queries on the data stored in Realm. Let us see some examples, starting with <code>GET</code> queries</p><h4 id="get-queries" tabindex="-1"><a class="header-anchor" href="#get-queries"><span>GET queries</span></a></h4><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">// gets all entries stored inside Pokemon entity</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// gets all entries stored inside Pokemon entity in descending order </span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> withPredicate<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span></span>
<span class="line">                        sortedByKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;pokemonNumber&quot;</span></span><span class="token punctuation">,</span> </span>
<span class="line">                        inAscending<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                            </span>
<span class="line"></span>
<span class="line"><span class="token comment">// gets all entries from Pokemon entity whose id is greater than or equal to 100</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> </span>
<span class="line">                       withPredicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span> <span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;id &gt;= %d&quot;</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">/// gets all pokemons from Pokemon entity whose names begin with A</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> </span>
<span class="line">                       withPredicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span> <span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;name begins with %@&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                       sortedByKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;pokemonNumber&quot;</span></span><span class="token punctuation">,</span> </span>
<span class="line">                       inAscending<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delete-queries" tabindex="-1"><a class="header-anchor" href="#delete-queries"><span>DELETE queries</span></a></h4><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">// deletes entires from Pokemon entity that contains &#39;mew&#39; in its name </span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">                                           withPredicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span> <span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;name contains [cd] %@&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;new&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// deletes all pokemons from Pokemon entity whose names begin with &#39;C&#39; </span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span></span>
<span class="line">                                           withPredicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span> <span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;name begins with %@&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;C&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                                           sortedByKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;pokemonNumber&quot;</span></span><span class="token punctuation">,</span> </span>
<span class="line">                                           inAscending<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="update-queries" tabindex="-1"><a class="header-anchor" href="#update-queries"><span>UPDATE queries</span></a></h4><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token comment">// fetch Pikachu&#39;s entry from Pokemon entity and changes the name to &#39;PIKACHU&#39;</span></span>
<span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> pikachu <span class="token operator">=</span> <span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>fromEntity<span class="token punctuation">:</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> </span>
<span class="line">                                     withPredicate<span class="token punctuation">:</span> <span class="token class-name">NSPredicate</span> <span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;pokemonNumber = %@&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;025&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">RealmManager</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>pikachu<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>newObject<span class="token punctuation">)</span> <span class="token keyword">in</span> </span>
<span class="line">    <span class="token comment">// update the name to allCAPS</span></span>
<span class="line">    pikachu<span class="token punctuation">.</span>name <span class="token operator">=</span> pikachu<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="unit-testing" tabindex="-1"><a class="header-anchor" href="#unit-testing"><span>Unit Testing</span></a></h2><details class="hint-container details"><summary>Unit Testing</summary><p>Unit Tests are automated tests that run and validate function in your project and makes sure they behave as intended and meet their design. Using <code>XCTAssert</code> function we can dictate whether an expression should b true, false, equal, nil, etc. Xcode uses the <code>XCTest</code> framework in order to perform these Unit Tests</p><h3 id="create-a-new-swift-file-and-add-this-code" tabindex="-1"><a class="header-anchor" href="#create-a-new-swift-file-and-add-this-code"><span>Create a new swift file and add this code</span></a></h3><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> brand<span class="token punctuation">:</span> <span class="token class-name">CarBrand</span></span>
<span class="line">    <span class="token keyword">var</span> model<span class="token punctuation">:</span> <span class="token class-name">CarModel</span></span>
<span class="line">    <span class="token keyword">var</span> feulType<span class="token punctuation">:</span> <span class="token class-name">FeulType</span></span>
<span class="line">    <span class="token keyword">var</span> parkingSpot<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span></span>
<span class="line">    <span class="token keyword">var</span> horsepower<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>brand<span class="token punctuation">:</span> <span class="token class-name">CarBrand</span><span class="token punctuation">,</span> model<span class="token punctuation">:</span> <span class="token class-name">CalModel</span><span class="token punctuation">,</span> feulType<span class="token punctuation">:</span> <span class="token class-name">FeulType</span><span class="token punctuation">,</span> hosepower<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> parkingSpot<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>feulType <span class="token operator">=</span> feulType</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>parkingSpot <span class="token operator">=</span> parkingSpot</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>horsepower <span class="token operator">=</span> horsepower</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">moveToParkingSpot</span><span class="token punctuation">(</span>spot<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        parkingSpot <span class="token operator">=</span> spot</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">leaveParkingSpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">        parkingSpot <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">installSuperCharger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        horsepower <span class="token operator">=</span> horsepower <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">FeulType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> gas</span>
<span class="line">    <span class="token keyword">case</span> diesel</span>
<span class="line">    <span class="token keyword">case</span> hybrid</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">CarBrand</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">Honda</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">Acura</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">BMW</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">Volkswagen</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">CarModel</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">Civic</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token constant">CSX</span></span>
<span class="line">    <span class="token keyword">case</span> M3</span>
<span class="line">    <span class="token keyword">case</span> <span class="token class-name">Jetta</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testing-code" tabindex="-1"><a class="header-anchor" href="#testing-code"><span>Testing Code ...</span></a></h3><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">XCTest</span></span>
<span class="line"><span class="token attribute atrule">@testable</span> <span class="token keyword">import</span> <span class="token class-name">UnitTesting</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UnitTestingTests</span><span class="token punctuation">:</span> <span class="token class-name">XCTestCase</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> car1<span class="token punctuation">:</span> <span class="token class-name">Car</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">var</span> car2<span class="token punctuation">:</span> <span class="token class-name">Car</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        car1 <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>brand<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token class-name">Honda</span><span class="token punctuation">,</span> model<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token class-name">Civic</span><span class="token punctuation">,</span> feulType<span class="token punctuation">:</span> <span class="token punctuation">.</span>gas<span class="token punctuation">,</span> horssepower<span class="token punctuation">:</span> <span class="token number">115</span><span class="token punctuation">,</span> parkingSpot<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        car2 <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>brand<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token class-name">Volkswagen</span><span class="token punctuation">,</span> model<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token class-name">Jetta</span><span class="token punctuation">,</span> feulType<span class="token punctuation">:</span> <span class="token punctuation">.</span>diesel<span class="token punctuation">,</span> horsepower<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> parkingSpot<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        car1 <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">        car2 <span class="token operator">=</span><span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">testIfCarsHaveNoParkingSpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span>car1<span class="token punctuation">,</span> car2<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">for</span> car <span class="token keyword">in</span> cars <span class="token punctuation">{</span></span>
<span class="line">            car<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">leaveParkingSpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">XCTAssertTrue</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>parkingSpot <span class="token operator">==</span> <span class="token nil constant">nil</span> <span class="token operator">&amp;&amp;</span> car2<span class="token punctuation">.</span>parkingSpot <span class="token operator">==</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">testIfCarsAreNotInTheSameParkingSpot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        car1<span class="token punctuation">.</span><span class="token function">moveToParkingSpot</span><span class="token punctuation">(</span>spot<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">XCTAssertTrue</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>parkingSpot <span class="token operator">!=</span> car2<span class="token punctuation">.</span>parkingSpot<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">testIfJettaHasMoreHorsePower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        car2<span class="token punctuation">.</span><span class="token function">installSuperCharger</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">XCTAssertTrue</span><span class="token punctuation">(</span>car1<span class="token punctuation">.</span>horsepower <span class="token operator">&lt;</span> car2<span class="token punctuation">.</span>horsepower<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><hr><h2 id="extension-s" tabindex="-1"><a class="header-anchor" href="#extension-s"><span>Extension(s)</span></a></h2><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><h4 id="printing-optionals-without-optional-wrapping" tabindex="-1"><a class="header-anchor" href="#printing-optionals-without-optional-wrapping"><span>Printing optionals without <code>Optional(…)</code> wrapping</span></a></h4><p>We can define custom interpolation for any optional value which supports conversion to a string.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift"><pre><code class="language-swift"><span class="line"><span class="token keyword">import</span> <span class="token class-name">Foundation</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token class-name">StringInterpolation</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">appendInterpolation</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">CustomStringConvertible</span><span class="token operator">&gt;</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token omit keyword">_</span> value<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token operator">?</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">appendInterpolation</span><span class="token punctuation">(</span>value <span class="token operator">??</span> <span class="token function">placeholder</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">placeholder</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">for</span> type<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">Type</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">CustomStrintConvertible</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;nil (</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">type</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">?)&quot;</span></span> <span class="token keyword">as</span> <span class="token class-name">CustomStringConvertible</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49)),a(u)])}const q=r(v,[["render",h]]),V=JSON.parse('{"path":"/programming/swift/tips.html","title":"Tips","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Tips","description":"Swift > Tips","icon":"fas fa-lightbulb","category":["Swift","Tips"],"tag":["swift","swift3","swift4","swift-ui","swiftui","tips","xcode","macos","ios"],"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tips\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/programming/swift/tips.html"}],["meta",{"property":"og:site_name","content":"chanhi2000"}],["meta",{"property":"og:title","content":"Tips"}],["meta",{"property":"og:description","content":"Swift > Tips"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"article:tag","content":"ios"}],["meta",{"property":"article:tag","content":"macos"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"tips"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"swift-ui"}],["meta",{"property":"article:tag","content":"swift4"}],["meta",{"property":"article:tag","content":"swift3"}],["meta",{"property":"article:tag","content":"swift"}]]},"git":{},"readingTime":{"minutes":7.98,"words":2395},"filePathRelative":"programming/swift/tips.md"}');export{q as comp,V as data};
